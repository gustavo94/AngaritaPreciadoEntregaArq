Microsoft (R) Macro Assembler Version 10.00.30319.01	    06/11/14 13:57:46
ESTADÍSTICAS						(main.asm  Page 1 - 1


				TITLE ESTADÍSTICAS						(main.asm)

				; Descripción:
				; Este software fue desarrollado para la clase de Arquitectura de Computadores 2014-I
				; Esta diseñado para generar diferentes estadísticas a partir de datos contenidos en un archivo de texto

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 


 00000000			.DATA

				;código de la tilde: a=160, e=130, i=161, o=162, u=163

				;decoración del mensaje de bienvenida
 00000000 DB 00 B2 00 B1	CuadrosAscii BYTE 219,0,178,0,177,0," ",0;176,0,177,0,178,0,219,0
	   00 20 00
				;CuadrosAscii BYTE 220,0,219,0,223,0,219,0;176,0,177,0,178,0,219,0  ;219,0,219,0,178,0,177,0,176,0
				;CuadrosAscii BYTE 220,0,219,0,223,0,219,0,220,0,219,0,223,0,220,0
 00000008 00000000		contadorBarra DWORD 0 ; contador para animaciones

				;líneas del mensaje de bienvenida 
				;con espacios en blanco para que cada mensaje se vea centrado
 0000000C  0000000E [		mensaje DWORD 14 DUP(0)	; array que tiene la dirección donde empieza cada una de las líneas del mensaje
	    00000000
	   ]
 = 0000000D			numLineasMsjBv = 13
 00000044 20 00			mensajeBienvenida1 BYTE			       " ",0																					;1 caracter
 00000046  00000011 [		mensajeBienvenida2 BYTE			       17 DUP(" "),"Bienvenido al programa de estudio estad",161d,"stico",0						;45 caracteres
	    20
	   ] 42 69 65 6E
	   76 65 6E 69 64
	   6F 20 61 6C 20
	   70 72 6F 67 72
	   61 6D 61 20 64
	   65 20 65 73 74
	   75 64 69 6F 20
	   65 73 74 61 64
	   A1 73 74 69 63
	   6F 00
 00000085 20 00			mensajeBienvenida3 BYTE			       " ",0																					;1 caracter
 00000087  00000017 [		mensajeBienvenida4 BYTE				   23 DUP(" "),"Arquitectura del Computador 2014-I",0										;34 caracteres 
	    20
	   ] 41 72 71 75
	   69 74 65 63 74
	   75 72 61 20 64
	   65 6C 20 43 6F
	   6D 70 75 74 61
	   64 6F 72 20 32
	   30 31 34 2D 49
	   00
 000000C1 20 00			mensajeBienvenida5 BYTE			       " ",0																					;1 caracter   
 000000C3  00000016 [		mensajeBienvenida6 BYTE				   22 DUP(" "),"Este software fue desarrollado por:",0										;35 caracteres
	    20
	   ] 45 73 74 65
	   20 73 6F 66 74
	   77 61 72 65 20
	   66 75 65 20 64
	   65 73 61 72 72
	   6F 6C 6C 61 64
	   6F 20 70 6F 72
	   3A 00
 000000FD  00000011 [		mensajeBienvenida7 BYTE				   17 DUP(" "),"Gustavo Le",162d,"n Preciado Jim",130d,"nez C.C. 1037635880",0				;45 caracteres
	    20
	   ] 47 75 73 74
	   61 76 6F 20 4C
	   65 A2 6E 20 50
	   72 65 63 69 61
	   64 6F 20 4A 69
	   6D 82 6E 65 7A
	   20 43 2E 43 2E
	   20 31 30 33 37
	   36 33 35 38 38
	   30 00
 0000013C  00000010 [		mensajeBienvenida8 BYTE				   16 DUP(" "),"Gustavo Andr",130d,"s Angarita Vel",160d,"squez C.C. 1037635327",0			;48 caracteres
	    20
	   ] 47 75 73 74
	   61 76 6F 20 41
	   6E 64 72 82 73
	   20 41 6E 67 61
	   72 69 74 61 20
	   56 65 6C A0 73
	   71 75 65 7A 20
	   43 2E 43 2E 20
	   31 30 33 37 36
	   33 35 33 32 37
	   00
 0000017E 20 00			mensajeBienvenida9 BYTE			       " ",0																					;1 caracter
 00000180  00000013 [		mensajeBienvenida10 BYTE			   19 DUP(" "),"Este software est",160d," dise",164d,"ado para calcular",0					;41 caracteres
	    20
	   ] 45 73 74 65
	   20 73 6F 66 74
	   77 61 72 65 20
	   65 73 74 A0 20
	   64 69 73 65 A4
	   61 64 6F 20 70
	   61 72 61 20 63
	   61 6C 63 75 6C
	   61 72 00
 000001BD  00000014 [		mensajeBienvenida11 BYTE			   20 DUP(" "),"distintas medidas estad",161d,"sticas a partir",0							;39 caracteres
	    20
	   ] 64 69 73 74
	   69 6E 74 61 73
	   20 6D 65 64 69
	   64 61 73 20 65
	   73 74 61 64 A1
	   73 74 69 63 61
	   73 20 61 20 70
	   61 72 74 69 72
	   00
 000001F9  0000001B [		mensajeBienvenida12 BYTE			   27 DUP(" "),"de los datos de un archivo",0												;26 caracteres
	    20
	   ] 64 65 20 6C
	   6F 73 20 64 61
	   74 6F 73 20 64
	   65 20 75 6E 20
	   61 72 63 68 69
	   76 6F 00
 0000022F  0000000A [		mensajeBienvenida13 BYTE			   10 DUP(" "), 60 DUP("-"),0; indica el final del mensaje.									;60 caracteres
	    20
	   ]
	   0000003C [
	    2D
	   ] 00
 00000276 20 00			mensajeBienvenida14 BYTE			   " ",0																					;1 caracter

				;líneas del mensaje de despedida 
				;con espacios en blanco para que cada mensaje se vea centrado
 00000278  0000000E [		mensajeD DWORD 14 DUP(0)	; array que tiene la dirección donde empieza cada una de las líneas del mensaje
	    00000000
	   ]
 = 00000004			numLineasMsjDp = 4
 000002B0 20 00			mensajeDespedida1 BYTE			       " ",0																					;1 caracter
 000002B2  00000017 [		mensajeDespedida2 BYTE			       23 DUP(" "),"Gracias por usar nuestro software.",0										;34 caracteres
	    20
	   ] 47 72 61 63
	   69 61 73 20 70
	   6F 72 20 75 73
	   61 72 20 6E 75
	   65 73 74 72 6F
	   20 73 6F 66 74
	   77 61 72 65 2E
	   00
 000002EC 20 00			mensajeDespedida3 BYTE			       " ",0																					;1 caracter
 000002EE  00000016 [		mensajeDespedida4 BYTE				   22 DUP(" "),"Esperamos que haya sido de utilidad.",0										;36 caracteres 
	    20
	   ] 45 73 70 65
	   72 61 6D 6F 73
	   20 71 75 65 20
	   68 61 79 61 20
	   73 69 64 6F 20
	   64 65 20 75 74
	   69 6C 69 64 61
	   64 2E 00
 00000329 20 00			mensajeDespedida5 BYTE			       " ",0																					;1 caracter																				;1 caracter

 0000032B 00000000		contadorMensaje DWORD 0 ;servirá para desplazar el mensaje de bienvenida/despedida
 0000032F 00			contMensaje BYTE 0

				;cuenta cuántas veces ha sido ejecutado el programa
 00000330 00000000		contEjecuciones DWORD 0

 00000334  00000005 [		auxCiclos	DWORD 5 DUP(0); array que servirá como variables auxiliares y de control durante los ciclos
	    00000000
	   ]

 00000348 000A 000A		tiempoEspera WORD 10,10 ; tiempos de espera para las animaciones

				;fondos y colores de texto
 = 000000F9			colores1 EQU lightBlue + (white * 16); Azul claro sobre blanco
 = 0000009B			colores2 EQU lightCyan + (lightBlue * 16)
 = 0000009F			colores3 EQU white + (lightBlue * 16)

 0000034C 31 2E 20 4D 65	stringEstadisticos     BYTE "1. Media aritm",130,"tica",0dh,0ah
	   64 69 61 20 61
	   72 69 74 6D 82
	   74 69 63 61 0D
	   0A
 00000361  32 2E 20 4D 65					   BYTE	"2. Mediana",0dh,0ah
	   64 69 61 6E 61
	   0D 0A
 0000036D  33 2E 20 4D 6F					   BYTE	"3. Moda",0dh,0ah
	   64 61 0D 0A
 00000376  34 2E 20 4D 65					   BYTE "4. Media geom",130,"trica",0dh,0ah
	   64 69 61 20 67
	   65 6F 6D 82 74
	   72 69 63 61 0D
	   0A
 0000038B  35 2E 20 4D 65					   BYTE	"5. Media arm",162,"nica",0dh,0ah
	   64 69 61 20 61
	   72 6D A2 6E 69
	   63 61 0D 0A
 0000039E  36 2E 20 50 65					   BYTE	"6. Percentiles",0dh,0ah
	   72 63 65 6E 74
	   69 6C 65 73 0D
	   0A
 000003AE  37 2E 20 43 75					   BYTE	"7. Cuartiles",0dh,0ah
	   61 72 74 69 6C
	   65 73 0D 0A
 000003BC  38 2E 20 44 65					   BYTE	"8. Deciles",0dh,0ah
	   63 69 6C 65 73
	   0D 0A
 000003C8  39 2E 20 4D 6F					   BYTE	"9. Momentos respecto al origen",0dh,0ah
	   6D 65 6E 74 6F
	   73 20 72 65 73
	   70 65 63 74 6F
	   20 61 6C 20 6F
	   72 69 67 65 6E
	   0D 0A
 000003E8  31 30 2E 20 4D					   BYTE	"10. Momentos centrales o respecto a la media",0dh,0ah
	   6F 6D 65 6E 74
	   6F 73 20 63 65
	   6E 74 72 61 6C
	   65 73 20 6F 20
	   72 65 73 70 65
	   63 74 6F 20 61
	   20 6C 61 20 6D
	   65 64 69 61 0D
	   0A
 00000416  31 31 2E 20 56					   BYTE	"11. Varianza",0dh,0ah
	   61 72 69 61 6E
	   7A 61 0D 0A
 00000424  31 32 2E 20 44					   BYTE	"12. Desviaci",162,"n t",161,"pica",0dh,0ah
	   65 73 76 69 61
	   63 69 A2 6E 20
	   74 A1 70 69 63
	   61 0D 0A
 0000043B  31 33 2E 20 43					   BYTE	"13. Cuasi-varianza",0dh,0ah
	   75 61 73 69 2D
	   76 61 72 69 61
	   6E 7A 61 0D 0A
 0000044F  31 34 2E 20 44					   BYTE	"14. Desviaci",162,"n media respecto a la media",0dh,0ah
	   65 73 76 69 61
	   63 69 A2 6E 20
	   6D 65 64 69 61
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 20 6C 61 20
	   6D 65 64 69 61
	   0D 0A
 00000479  31 35 2E 20 44					   BYTE	"15. Desviaci",162,"n media respecto a la mediana",0dh,0ah,0
	   65 73 76 69 61
	   63 69 A2 6E 20
	   6D 65 64 69 61
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 20 6C 61 20
	   6D 65 64 69 61
	   6E 61 0D 0A 00

				;direccion del archivo
 000004A6  00000104 [		urlDatos BYTE 260 DUP(0)
	    00
	   ]
 000005AA 00000000		fileHandle  HANDLE ?

				;arreglos con los datos, los datos sin repetir y las frecuencias de los datos sin repetir
 = 00000258			maxDatos = 600
 000005AE  00000258 [		numeros REAL8 maxDatos DUP(-1.), -1.
	    BFF0000000000000
	   ]
	   BFF0000000000000
 00001876  00000258 [		numerosDistintos REAL8 maxDatos DUP(-1.), -1.
	    BFF0000000000000
	   ]
	   BFF0000000000000
 00002B3E  00000258 [		frecuencias DWORD maxDatos DUP(0), 0
	    00000000
	   ] 00000000
 000034A2 00000000		cantDatosDistintos DWORD 0
 000034A6 00000000		frecuenciaMax DWORD 0 ;para la moda

				;auxiliar para leer los datos
 = 00001388			tamanoBufer = 5000
 000034AA  00001388 [		buferArchivo BYTE tamanoBufer DUP(?), 0
	    00
	   ] 00
 00004833 00			datoActual BYTE ?
 00004834 00000000		relleno DWORD 0 ;se debe poner para que el valor de realactual no interfiera en la lectura
 00004838			realActual REAL8 ?
	   0000000000000000
 00004840 00000000		coma DWORD 0
 00004844 00000000		contCicloDecimales DWORD 0
 00004848 00000000		realesLeidos DWORD 0
 0000484C 00000000		saltoDeLinea DWORD 0
 00004850 00000000		finArchivo DWORD 0

				;auxiliares para las sumatorias
 00004854			auxSumatoria REAL8 0.
	   0000000000000000
 0000485C			diez REAL8 10.
	   4024000000000000
 00004864			numDos REAL8 2.
	   4000000000000000
 0000486C			unDecimo REAL8 0.1
	   3FB999999999999A
 00004874			menosUno REAL8 -1.
	   BFF0000000000000

				;Auxiliares para ordenar
 0000487C 00000000		posActual DWORD 0
 00004880 00000000		indiceCicloOrdenar DWORD 0
 00004884 00000000		indiceCicloComparar DWORD 0
 00004888			menorValor REAL8 0.
	   0000000000000000
 00004890			epsilon REAL8 1.0E-12
	   3D719799812DEA11
 00004898 00000000		posMenor DWORD 0

				;Auxiliares para imprimir
 0000489C			ceroReal REAL8 0.
	   0000000000000000
 000048A4			numeroReal REAL8 0.
	   0000000000000000

				;estadisticos
 000048AC			media REAL8 0.
	   0000000000000000
 000048B4			mediana REAL8 0.
	   0000000000000000
 000048BC  00000258 [		moda REAL8 maxDatos DUP(-1.), -1.
	    BFF0000000000000
	   ]
	   BFF0000000000000
 00005B84			mediageometrica REAL8 0.
	   0000000000000000
 00005B8C			mediaarmonica REAL8 0.
	   0000000000000000
 00005B94  00000065 [		percentiles REAL8 101 DUP(-1.)
	    BFF0000000000000
	   ]
 00005EBC  00000005 [		cuartiles REAL8 5 DUP(-1.)
	    BFF0000000000000
	   ]
 00005EE4  0000000B [		deciles REAL8 11 DUP(-1.)
	    BFF0000000000000
	   ]
 00005F3C			momentosOrigen REAL8 0.
	   0000000000000000
 00005F44			momentosCentrales REAL8 0.
	   0000000000000000
 00005F4C			varianza REAL8 0.
	   0000000000000000
 00005F54			desvEstandar REAL8 0.
	   0000000000000000
 00005F5C			cuasiVarianza REAL8 0.
	   0000000000000000
 00005F64			desvMedia REAL8 0.
	   0000000000000000
 00005F6C			desvMediana REAL8 0.
	   0000000000000000

				;auxiliares para los estadísticos
 00005F74 00000000		ordenMomOrig DWORD ?
 00005F78 00000000		ordenMomCent DWORD ?
 00005F7C 00000000		posModa DWORD 0

				;contiene booleanos que indican si el usuario solicitó el estadístico n
 00005F80  00000050 [		buferUsuario BYTE 80 DUP(0)
	    00
	   ]
 00005FD0  0000000F [		boolEstadisticos DWORD 15 DUP(0)
	    00000000
	   ]


				;para evitar problemas
 0000600C  00000064 [		relleno2 DWORD 100 DUP(0)
	    00000000
	   ]



 00000000			.CODE

				;-----------------------------------------------------------------------------------------------------------
 00000000			main PROC
				;-----------------------------------------------------------------------------------------------------------
 00000000  9B DB E3		FINIT

				;prepara la consola
 00000003  B8 0000009B		MOV eax, colores2
 00000008  E8 00000000 E	CALL SetTextColor
 0000000D  E8 00000000 E	CALL Clrscr

				;mensaje de bienvenida
 00000012  E8 00000230		CALL pintarBarrasIni
 00000017  E8 000000B9		CALL cargarMensaje
 0000001C			inicio:
 0000001C  E8 00000173		CALL mostrarMensaje
 00000021  FE 05 0000032F R	INC contMensaje
 00000027  80 3D 0000032F R	CMP contMensaje, 23
	   17
 0000002E  7C EC		JL inicio
 00000030  E8 00000000 E	CALL waitMsg
 00000035  E8 00000000 E	CALL Clrscr

				;hace todos los cálculos excepto los momentos
 0000003A  E8 00000383		CALL leerArchivo
 0000003F  E8 0000054D		CALL calcularEstadisticos

 00000044			ejec:
 00000044  B8 0000009F			MOV eax, colores3
 00000049  E8 00000000 E		CALL SetTextColor
 0000004E  E8 00000000 E		CALL Clrscr
 00000053  E8 000002AB			CALL contadorEjec
					mWrite <"Para cada ejecuci",162,"n usted puede utilizar un orden diferente para los momentos",0dh,0ah,"Por favor ingr",130,"selos a continuaci",162,"n",0dh,0ah>
 0000619C		     1		.data		
 0000619C 50 61 72 61 20     1		??0000 BYTE "Para cada ejecuci",162,"n usted puede utilizar un orden diferente para los momentos",0dh,0ah,"Por favor ingr",130,"selos a continuaci",162,"n",0dh,0ah,0	
	   63 61 64 61 20
	   65 6A 65 63 75
	   63 69 A2 6E 20
	   75 73 74 65 64
	   20 70 75 65 64
	   65 20 75 74 69
	   6C 69 7A 61 72
	   20 75 6E 20 6F
	   72 64 65 6E 20
	   64 69 66 65 72
	   65 6E 74 65 20
	   70 61 72 61 20
	   6C 6F 73 20 6D
	   6F 6D 65 6E 74
	   6F 73 0D 0A 50
	   6F 72 20 66 61
	   76 6F 72 20 69
	   6E 67 72 82 73
	   65 6C 6F 73 20
	   61 20 63 6F 6E
	   74 69 6E 75 61
	   63 69 A2 6E 0D
	   0A 00
 00000058		     1		.code
 00000058  52		     1		push	edx
 00000059  BA 0000619C R     1		mov	edx,OFFSET ??0000
 0000005E  E8 00000000 E     1		call	WriteString
 00000063  5A		     1		pop	edx
 00000064  E8 00000000 E		CALL crlf
					mWrite <"Por favor indique el orden que se usar",160," para calcular el momento ",0dh,0ah,"con respecto al origen:",0dh,0ah>
 00006211		     1		.data		
 00006211 50 6F 72 20 66     1		??0001 BYTE "Por favor indique el orden que se usar",160," para calcular el momento ",0dh,0ah,"con respecto al origen:",0dh,0ah,0	
	   61 76 6F 72 20
	   69 6E 64 69 71
	   75 65 20 65 6C
	   20 6F 72 64 65
	   6E 20 71 75 65
	   20 73 65 20 75
	   73 61 72 A0 20
	   70 61 72 61 20
	   63 61 6C 63 75
	   6C 61 72 20 65
	   6C 20 6D 6F 6D
	   65 6E 74 6F 20
	   0D 0A 63 6F 6E
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 6C 20 6F 72
	   69 67 65 6E 3A
	   0D 0A 00
 00000069		     1		.code
 00000069  52		     1		push	edx
 0000006A  BA 00006211 R     1		mov	edx,OFFSET ??0001
 0000006F  E8 00000000 E     1		call	WriteString
 00000074  5A		     1		pop	edx
 00000075  E8 00000000 E		CALL readInt
 0000007A  A3 00005F74 R		MOV ordenMomOrig, eax
					mWrite <"Por favor indique el orden que se usar",160," para calcular el momento ",0dh,0ah,"con respecto a la media",0dh,0ah>
 0000626E		     1		.data		
 0000626E 50 6F 72 20 66     1		??0002 BYTE "Por favor indique el orden que se usar",160," para calcular el momento ",0dh,0ah,"con respecto a la media",0dh,0ah,0	
	   61 76 6F 72 20
	   69 6E 64 69 71
	   75 65 20 65 6C
	   20 6F 72 64 65
	   6E 20 71 75 65
	   20 73 65 20 75
	   73 61 72 A0 20
	   70 61 72 61 20
	   63 61 6C 63 75
	   6C 61 72 20 65
	   6C 20 6D 6F 6D
	   65 6E 74 6F 20
	   0D 0A 63 6F 6E
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 20 6C 61 20
	   6D 65 64 69 61
	   0D 0A 00
 0000007F		     1		.code
 0000007F  52		     1		push	edx
 00000080  BA 0000626E R     1		mov	edx,OFFSET ??0002
 00000085  E8 00000000 E     1		call	WriteString
 0000008A  5A		     1		pop	edx
 0000008B  E8 00000000 E		CALL readInt
 00000090  A3 00005F78 R		MOV ordenMomCent, eax
 00000095  E8 00000539			CALL calcularMomentos
 0000009A  E8 0000053F			CALL pedirEstadisticos
 0000009F  E8 00000754			CALL imprimirEstadisticosSelec

 000000A4  E8 00000000 E		CALL Crlf
				mWrite "Desea ejecutar nuevamente el programa? 1=si, 0=no"
 000062CB		     1		.data		
 000062CB 44 65 73 65 61     1		??0003 BYTE "Desea ejecutar nuevamente el programa? 1=si, 0=no",0	
	   20 65 6A 65 63
	   75 74 61 72 20
	   6E 75 65 76 61
	   6D 65 6E 74 65
	   20 65 6C 20 70
	   72 6F 67 72 61
	   6D 61 3F 20 31
	   3D 73 69 2C 20
	   30 3D 6E 6F 00
 000000A9		     1		.code
 000000A9  52		     1		push	edx
 000000AA  BA 000062CB R     1		mov	edx,OFFSET ??0003
 000000AF  E8 00000000 E     1		call	WriteString
 000000B4  5A		     1		pop	edx
 000000B5  E8 00000000 E	CALL Crlf
 000000BA  E8 00000000 E	CALL readInt
 000000BF  83 F8 00		CMP eax, 0 
 000000C2  75 80		JNE ejec

 000000C4  E8 00000288		CALL mostrarDespedida

 000000C9  E8 00000000 E	CALL waitMsg
					exit
 000000D5			main ENDP

				;-----------------------------------------------------------------------------------------------------------
 000000D5			cargarMensaje PROC
				;Carga los mensajes en el array
				;-----------------------------------------------------------------------------------------------------------
 000000D5  C7 05 0000000C R	MOV mensaje,OFFSET mensajeBienvenida1 
	   00000044 R
 000000DF  C7 05 00000010 R	MOV [mensaje+4],OFFSET mensajeBienvenida2
	   00000046 R
 000000E9  C7 05 00000014 R	MOV [mensaje+8],OFFSET mensajeBienvenida3
	   00000085 R
 000000F3  C7 05 00000018 R	MOV [mensaje+12],OFFSET mensajeBienvenida4
	   00000087 R
 000000FD  C7 05 0000001C R	MOV [mensaje+16],OFFSET mensajeBienvenida5
	   000000C1 R
 00000107  C7 05 00000020 R	MOV [mensaje+20],OFFSET mensajeBienvenida6
	   000000C3 R
 00000111  C7 05 00000024 R	MOV [mensaje+24],OFFSET mensajeBienvenida7
	   000000FD R
 0000011B  C7 05 00000028 R	MOV [mensaje+28],OFFSET mensajeBienvenida8
	   0000013C R
 00000125  C7 05 0000002C R	MOV [mensaje+32],OFFSET mensajeBienvenida9
	   0000017E R
 0000012F  C7 05 00000030 R	MOV [mensaje+36],OFFSET mensajeBienvenida10
	   00000180 R
 00000139  C7 05 00000034 R	MOV [mensaje+40],OFFSET mensajeBienvenida11
	   000001BD R
 00000143  C7 05 00000038 R	MOV [mensaje+44],OFFSET mensajeBienvenida12
	   000001F9 R
 0000014D  C7 05 0000003C R	MOV [mensaje+48],OFFSET mensajeBienvenida13
	   0000022F R
 00000157  C7 05 00000040 R	MOV [mensaje+52],OFFSET mensajeBienvenida14
	   00000276 R

 00000161  C7 05 00000278 R	MOV mensajeD,OFFSET mensajeDespedida1
	   000002B0 R
 0000016B  C7 05 0000027C R	MOV [mensajeD+4],OFFSET mensajeDespedida2
	   000002B2 R
 00000175  C7 05 00000280 R	MOV [mensajeD+8],OFFSET mensajeDespedida3
	   000002EC R
 0000017F  C7 05 00000284 R	MOV [mensajeD+12],OFFSET mensajeDespedida4
	   000002EE R
 00000189  C7 05 00000288 R	MOV [mensajeD+16],OFFSET mensajeDespedida5
	   00000329 R

 00000193  C3			RET
 00000194			cargarMensaje ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000194			mostrarMensaje PROC
				;Muestra el mensaje de bienvenida en 6 líneas entre dos barras animadas, las 6 líneas se van desplazando para 
				;mostrar todo el mensaje de bienvenida
				;-----------------------------------------------------------------------------------------------------------

 00000194  E8 00000000 E	CALL Clrscr ; limpiar la pantalla

 00000199  E8 00000121		CALL animarBarra
 0000019E  E8 0000011C		CALL animarBarra

				;CALL Crlf

 000001A3  B8 0000009F		MOV eax, colores3
 000001A8  E8 00000000 E	call SetTextColor

 000001AD  B9 00000006		MOV ecx,6
 000001B2  A1 0000032B R	MOV eax,contadorMensaje ; indica en qué línea debe empezar

 000001B7  A3 00000334 R	MOV auxCiclos,eax
 000001BC			CICLO: ; en este ciclo se imprimen las líneas dentro de  las barras

 000001BC  A1 00000334 R		MOV eax,auxCiclos
 000001C1  BA 00000004			MOV edx,4
 000001C6  F7 E2			MUL edx ; multiplica el numero de la línea por 4 para el desplazamiento en memoria

 000001C8  8B 90 0000000C R		MOV edx, [mensaje+eax]
 000001CE  E8 00000000 E		CALL WriteString ;imprime la línea del mensaje
 000001D3  E8 00000000 E		CALL Crlf

 000001D8  83 3D 00000334 R		CMP auxCiclos,numLineasMsjBv ; controla que el valor de auxCiclos siempre este entre 0 y el número de líneas del mensaje
	   0D
 000001DF  7C 0C			JL MENOR
 000001E1  C7 05 00000334 R		MOV auxCiclos,0
	   00000000
 000001EB  EB 06			JMP NoMENOR
 000001ED				MENOR:
 000001ED  FF 05 00000334 R		INC auxCiclos
 000001F3				NoMENOR:

 000001F3  E2 C7		LOOP CICLO

				;CALL Crlf

 000001F5  83 3D 0000032B R	cmp contadorMensaje,numLineasMsjBv ; controla que el valor de contadorMensaje siempre este entre 0 y el número de líneas del mensaje
	   0D
 000001FC  7C 0C		JL MEN
 000001FE  C7 05 0000032B R	MOV contadorMensaje,0
	   00000000
 00000208  EB 06		JMP NoMEN
 0000020A			MEN:
 0000020A  FF 05 0000032B R	INC contadormensaje
 00000210			NoMEN:

 00000210  E8 000000AA		CALL animarBarra
 00000215  E8 000000A5		CALL animarBarra


 0000021A  66| A1			MOV ax, [tiempoEspera+2] 
	   0000034A R
					
 00000220  E8 00000000 E		CALL delay
					
 00000225  83 3D 00000008 R		CMP contadorBarra, 6
	   06
 0000022C  7C 0C			JL menor6
 0000022E  C7 05 00000008 R			MOV contadorBarra, 0
	   00000000
 00000238  EB 0C				JMP finsi
 0000023A				menor6:
 0000023A  FF 05 00000008 R			INC contadorBarra
 00000240  FF 05 00000008 R			INC contadorBarra
 00000246				finsi:
					
 00000246  C3			RET
 00000247			mostrarMensaje ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000247			pintarBarrasIni PROC
				;Pinta las barras superior e inferior en una animación que pinta de a 4 caracteres (código ascii 176) hasta llegar a 80
				;-----------------------------------------------------------------------------------------------------------
 00000247  E8 0000002E		CALL pintarBarra ; barra superior
 0000024C  E8 00000029		CALL pintarBarra ; barra superior

				;8 líneas en las que irá el mensaje de bienvenida
				;Líneas en blanco durante la entrada de las barras
				;CALL Crlf
 00000251  E8 00000000 E	CALL Crlf
 00000256  E8 00000000 E	CALL Crlf
 0000025B  E8 00000000 E	CALL Crlf	
 00000260  E8 00000000 E	CALL Crlf
 00000265  E8 00000000 E	CALL Crlf
 0000026A  E8 00000000 E	CALL Crlf
				;CALL Crlf

 0000026F  E8 00000006		CALL pintarBarra ; barra inferior
 00000274  E8 00000001		CALL pintarBarra ; barra inferior

 00000279  C3			RET
 0000027A			pintarBarrasIni ENDP

				;-----------------------------------------------------------------------------------------------------------
 0000027A			pintarBarra PROC
				;Procedimiento auxiliar para pintarBarrasIni este pinta cada una de las barras cada que es llamado
				;-----------------------------------------------------------------------------------------------------------
 0000027A  B8 0000009B		MOV eax, colores2
 0000027F  E8 00000000 E	CALL SetTextColor

 00000284  B9 00000014		MOV	ecx, 20 ; el ciclo se realizará 20 veces para llegar a 80 caracteres
					
 00000289			CiloImprimir:
						
 00000289  BA 00000000 R		MOV edx, OFFSET CuadrosAscii;
 0000028E  E8 00000000 E		CALL	WriteString
 00000293  BA 00000002 R		MOV edx, OFFSET CuadrosAscii[2];
 00000298  E8 00000000 E		CALL	WriteString
 0000029D  BA 00000004 R		MOV edx, OFFSET CuadrosAscii[4];
 000002A2  E8 00000000 E		CALL	WriteString
 000002A7  BA 00000006 R		MOV edx, OFFSET CuadrosAscii[6];
 000002AC  E8 00000000 E		CALL	WriteString

 000002B1  66| A1			MOV ax, tiempoEspera 
	   00000348 R
 000002B7  E8 00000000 E		CALL delay
					
					
 000002BC  E2 CB		LOOP CiloImprimir

 000002BE  C3			RET
 000002BF			pintarBarra ENDP

				;-----------------------------------------------------------------------------------------------------------
 000002BF			animarBarra PROC
				; Procedimiento para que la barra de cuadros parpadee intercambiando el simbolo ascii 176 y 177
				; cambia el caracter con el que se pinta la barra cada que es invocado
				;-----------------------------------------------------------------------------------------------------------
 000002BF  B8 0000009B		MOV eax, colores2
 000002C4  E8 00000000 E	CALL SetTextColor

 000002C9  66| B9 0050		MOV cx,80 ; hará un ciclo 40 veces pintando de a dos caracteres 176 o 177
 000002CD			L1:

 000002CD  BA 00000000 R		MOV edx, OFFSET CuadrosAscii
 000002D2  03 15 00000008 R		ADD edx, contadorBarra
 000002D8  E8 00000000 E		CALL	WriteString
 000002DD  83 3D 00000008 R		CMP contadorBarra, 6
	   06
 000002E4  7C 0C			JL menor6
 000002E6  C7 05 00000008 R			MOV contadorBarra, 0
	   00000000
 000002F0  EB 0C				JMP finsi
 000002F2				menor6:
 000002F2  FF 05 00000008 R			INC contadorBarra
 000002F8  FF 05 00000008 R			INC contadorBarra
 000002FE				finsi:

 000002FE  66| 49		DEC cx
 00000300  75 CB		JNZ L1 ;fin cilo para pintar la barra
						
 00000302  C3			RET
 00000303			animarBarra ENDP


				;-----------------------------------------------------------------------------------------------------------
 00000303			contadorEjec PROC
				;Muestra el número de veces que se ha ejecutado el programa
				;Solo se muestra después de la primera ejecución
				;-----------------------------------------------------------------------------------------------------------

 00000303  83 3D 00000330 R	CMP contEjecuciones, 0
	   00
 0000030A  74 3E		JE ceroEjec

				;muestra el número de veces que se ha ejecutado el programa
				mWrite "El programa se ha ejecutado "
 000062FD		     1		.data		
 000062FD 45 6C 20 70 72     1		??0004 BYTE "El programa se ha ejecutado ",0	
	   6F 67 72 61 6D
	   61 20 73 65 20
	   68 61 20 65 6A
	   65 63 75 74 61
	   64 6F 20 00
 0000030C		     1		.code
 0000030C  52		     1		push	edx
 0000030D  BA 000062FD R     1		mov	edx,OFFSET ??0004
 00000312  E8 00000000 E     1		call	WriteString
 00000317  5A		     1		pop	edx
 00000318  A1 00000330 R	MOV eax, contEjecuciones
 0000031D  E8 00000000 E	CALL writeDec
 00000322  83 3D 00000330 R	CMP contEjecuciones, 1
	   01
 00000329  75 0E		JNE noUno
				mWrite " vez"
 0000631A		     1		.data		
 0000631A 20 76 65 7A 00     1		??0005 BYTE " vez",0	
 0000032B		     1		.code
 0000032B  52		     1		push	edx
 0000032C  BA 0000631A R     1		mov	edx,OFFSET ??0005
 00000331  E8 00000000 E     1		call	WriteString
 00000336  5A		     1		pop	edx
 00000337  EB 0C		JMP todos
 00000339			noUno:
				mWrite " veces"
 0000631F		     1		.data		
 0000631F 20 76 65 63 65     1		??0006 BYTE " veces",0	
	   73 00
 00000339		     1		.code
 00000339  52		     1		push	edx
 0000033A  BA 0000631F R     1		mov	edx,OFFSET ??0006
 0000033F  E8 00000000 E     1		call	WriteString
 00000344  5A		     1		pop	edx
 00000345			todos:
 00000345  E8 00000000 E	CALL Crlf

 0000034A			ceroEjec:

 0000034A  FF 05 00000330 R	INC contEjecuciones

 00000350  C3			RET
 00000351			contadorEjec ENDP


				;-----------------------------------------------------------------------------------------------------------
 00000351			mostrarDespedida PROC
				;Muestra el mensaje de despedida
				;-----------------------------------------------------------------------------------------------------------
 00000351  E8 00000000 E	CALL Clrscr ; limpiar la pantalla

 00000356  E8 FFFFFEEC		call pintarBarrasIni
 0000035B  C7 05 00000008 R	MOV contadorBarra, 0
	   00000000

 00000365  E8 00000000 E	CALL Clrscr

 0000036A  E8 FFFFFF50		CALL animarBarra
 0000036F  E8 FFFFFF4B		CALL animarBarra

				;CALL Crlf

 00000374  B8 0000009F		mov eax, colores3
 00000379  E8 00000000 E	call SetTextColor

 0000037E  B9 00000004		MOV ecx, numLineasMsjDp
 00000383  41			INC ecx

 00000384  C7 05 00000334 R	MOV auxCiclos, 0
	   00000000

 0000038E			CICLOFIN: ; en este ciclo se imprimen las líneas dentro de  las barras

 0000038E  A1 00000334 R		MOV eax, auxCiclos

 00000393  BA 00000004			MOV edx,4
 00000398  F7 E2			MUL edx ; multiplica el numero de la línea por 4 para el desplazamiento en memoria

 0000039A  8B 90 00000278 R		MOV edx, [mensajeD+eax]
 000003A0  E8 00000000 E		CALL WriteString ;imprime la línea del mensaje
 000003A5  E8 00000000 E		CALL Crlf
					
 000003AA  FF 05 00000334 R		INC auxCiclos

 000003B0  E2 DC		LOOP CICLOFIN

 000003B2  E8 00000000 E	CALL Crlf

 000003B7  E8 FFFFFF03		CALL animarBarra
 000003BC  E8 FFFFFEFE		CALL animarBarra

 000003C1  C3			RET
 000003C2			mostrarDespedida ENDP


				;-----------------------------------------------------------------------------------------------------------
 000003C2			leerArchivo PROC
				;Carga el archivo y llama al metodo que ordena el vector
				;-----------------------------------------------------------------------------------------------------------
 000003C2  B8 0000009F		mov eax, colores3
 000003C7  E8 00000000 E	call SetTextColor

				;pide la ubicación del archivo y lo abre
				mWrite "Por favor ingrese la ruta del archivo que contiene los datos: "
 00006326		     1		.data		
 00006326 50 6F 72 20 66     1		??0007 BYTE "Por favor ingrese la ruta del archivo que contiene los datos: ",0	
	   61 76 6F 72 20
	   69 6E 67 72 65
	   73 65 20 6C 61
	   20 72 75 74 61
	   20 64 65 6C 20
	   61 72 63 68 69
	   76 6F 20 71 75
	   65 20 63 6F 6E
	   74 69 65 6E 65
	   20 6C 6F 73 20
	   64 61 74 6F 73
	   3A 20 00
 000003CC		     1		.code
 000003CC  52		     1		push	edx
 000003CD  BA 00006326 R     1		mov	edx,OFFSET ??0007
 000003D2  E8 00000000 E     1		call	WriteString
 000003D7  5A		     1		pop	edx
 000003D8  E8 00000000 E	CALL crlf

 000003DD			preguntaRuta:
 000003DD  BA 000004A6 R	MOV edx, OFFSET urlDatos
 000003E2  B9 00000104		MOV ecx, SIZEOF urlDatos
 000003E7  E8 00000000 E	CALL readString

 000003EC  BA 000004A6 R	MOV	edx,OFFSET urlDatos
 000003F1  E8 00000000 E	CALL OpenInputFile
 000003F6  A3 000005AA R	MOV	fileHandle, eax

				;revisa que se haya abierto correctamente el archivo
 000003FB  83 F8 FF		CMP	eax, INVALID_HANDLE_VALUE
 000003FE  75 0E		JNE	file_ok
				mWrite <"No se pudo abrir el archivo. Por favor ingrese una direcci",162,"n v",160,"lida",0dh,0ah>
 00006365		     1		.data		
 00006365 4E 6F 20 73 65     1		??0008 BYTE "No se pudo abrir el archivo. Por favor ingrese una direcci",162,"n v",160,"lida",0dh,0ah,0	
	   20 70 75 64 6F
	   20 61 62 72 69
	   72 20 65 6C 20
	   61 72 63 68 69
	   76 6F 2E 20 50
	   6F 72 20 66 61
	   76 6F 72 20 69
	   6E 67 72 65 73
	   65 20 75 6E 61
	   20 64 69 72 65
	   63 63 69 A2 6E
	   20 76 A0 6C 69
	   64 61 0D 0A 00
 00000400		     1		.code
 00000400  52		     1		push	edx
 00000401  BA 00006365 R     1		mov	edx,OFFSET ??0008
 00000406  E8 00000000 E     1		call	WriteString
 0000040B  5A		     1		pop	edx
 0000040C  EB CF		JMP	preguntaRuta
 0000040E			file_ok:

				;lee el archivo o sale si hay un error leyendo
 0000040E  BA 000034AA R	MOV	edx, OFFSET buferArchivo
 00000413  B9 00001388		MOV	ecx, tamanoBufer
 00000418  E8 00000000 E	CALL ReadFromFile
 0000041D  73 13		JNC	check_buffer_size
				mWrite <"Error leyendo el archivo. Por favor ingrese una direcci",162,"n v",160,"lida",0dh,0ah>
 000063AB		     1		.data		
 000063AB 45 72 72 6F 72     1		??0009 BYTE "Error leyendo el archivo. Por favor ingrese una direcci",162,"n v",160,"lida",0dh,0ah,0	
	   20 6C 65 79 65
	   6E 64 6F 20 65
	   6C 20 61 72 63
	   68 69 76 6F 2E
	   20 50 6F 72 20
	   66 61 76 6F 72
	   20 69 6E 67 72
	   65 73 65 20 75
	   6E 61 20 64 69
	   72 65 63 63 69
	   A2 6E 20 76 A0
	   6C 69 64 61 0D
	   0A 00
 0000041F		     1		.code
 0000041F  52		     1		push	edx
 00000420  BA 000063AB R     1		mov	edx,OFFSET ??0009
 00000425  E8 00000000 E     1		call	WriteString
 0000042A  5A		     1		pop	edx
 0000042B  E8 00000000 E	CALL	WriteWindowsMsg
 00000430  EB AB		JMP	preguntaRuta
					
 00000432			check_buffer_size:
 00000432  3D 00001388		CMP	eax, tamanoBufer
 00000437  72 0E		JB	buf_size_ok
				mWrite <"El archivo es demasiado extenso. Ingrese la direcci",162,"n de un archivo m",160,"s corto",0dh,0ah>
 000063EE		     1		.data		
 000063EE 45 6C 20 61 72     1		??000A BYTE "El archivo es demasiado extenso. Ingrese la direcci",162,"n de un archivo m",160,"s corto",0dh,0ah,0	
	   63 68 69 76 6F
	   20 65 73 20 64
	   65 6D 61 73 69
	   61 64 6F 20 65
	   78 74 65 6E 73
	   6F 2E 20 49 6E
	   67 72 65 73 65
	   20 6C 61 20 64
	   69 72 65 63 63
	   69 A2 6E 20 64
	   65 20 75 6E 20
	   61 72 63 68 69
	   76 6F 20 6D A0
	   73 20 63 6F 72
	   74 6F 0D 0A 00
 00000439		     1		.code
 00000439  52		     1		push	edx
 0000043A  BA 000063EE R     1		mov	edx,OFFSET ??000A
 0000043F  E8 00000000 E     1		call	WriteString
 00000444  5A		     1		pop	edx
 00000445  EB 96		JMP	preguntaRuta
					
 00000447			buf_size_ok:	
 00000447  C6 80 000034AA R	MOV	buferArchivo[eax],0 ;terminación nula para el archivo. eax contiene la cantidad de caracteres leídos
	   00

				;cierra el handle
 0000044E  A1 000005AA R	MOV	eax,fileHandle
 00000453  E8 00000000 E	CALL CloseFile

				;se leen los números y se meten en el arreglo
 00000458  BE 00000000		MOV esi, 0
 0000045D			leerNum:

					;reinicializa los valores de los auxiliares
 0000045D  C7 05 0000484C R		MOV saltoDeLinea, 0
	   00000000
 00000467  C7 05 00004840 R		MOV coma, 0
	   00000000
 00000471  C7 05 00004844 R		MOV contCicloDecimales, 0
	   00000000

					;carga el cero
 0000047B  D9 EE			FLDZ
 0000047D  DD 1D 00004838 R		FSTP realActual

					;ciclo de lectura de caracteres
 00000483  B9 00000050			MOV ecx, 80
					
 00000488				leerChar:

 00000488  B8 00000000				MOV eax, 0
 0000048D  8A 86 000034AA R			MOV al, buferArchivo[esi]
 00000493  46					INC esi

						;si el archivo terminó, sale del ciclo
 00000494  3C 00				CMP al, 0
 00000496  75 0F				JNE noFinArchivo
 00000498  C7 05 00004850 R			MOV finArchivo, 1
	   00000001
 000004A2  E9 000000E4				JMP finLectura
 000004A7					noFinArchivo:

						;si hay cr o lf, aumenta saltoDeLinea y pasa al siguiente caracter
 000004A7  3C 0D				CMP al, 13
 000004A9  75 18				JNE noCr
 000004AB  FF 05 0000484C R			INC saltoDeLinea
						;si ya se leyeron los dos, se pasa al siguiente número
 000004B1  83 3D 0000484C R			CMP saltoDeLinea, 2
	   02
 000004B8  0F 84 00000097			JE finNumero
 000004BE  E9 00000088				JMP finChar
 000004C3					noCr:
 000004C3  3C 0A				CMP al, 10
 000004C5  75 11				JNE noLf
 000004C7  FF 05 0000484C R		INC saltoDeLinea
						;si ya se leyeron los dos, se pasa al siguiente número
 000004CD  83 3D 0000484C R			CMP saltoDeLinea, 2
	   02
 000004D4  74 7F				JE finNumero
 000004D6  EB 73				JMP finChar
 000004D8					noLf:
						
					
						;si hay una coma o un punto, activa el booleano para empezar a poner los decimales
 000004D8  3C 2C				CMP al, 44
 000004DA  75 0C				JNE noEsComa
 000004DC  C7 05 00004840 R			MOV coma, 1
	   00000001
 000004E6  EB 63				JMP finChar
 000004E8					noEsComa:
 000004E8  3C 2E				CMP al, 46
 000004EA  75 0C				JNE noEsPunto
 000004EC  C7 05 00004840 R			MOV coma, 1
	   00000001
 000004F6  EB 53				JMP finChar
 000004F8					noEsPunto:

						;convierte el caracter en el número que representa
 000004F8  83 E8 30				SUB eax, 48

						;guarda el valor en el auxiliar
 000004FB  A2 00004833 R			MOV datoActual, al
 00000500  DB 05 00004833 R			FILD DWORD PTR datoActual

						;si coma es 0 (falso), multiplica por 10
 00000506  83 3D 00004840 R			CMP coma, 0
	   00
 0000050D  75 16				JNE decimales
 0000050F  DD 05 00004838 R			FLD realActual
 00000515  DC 0D 0000485C R			FMUL diez
 0000051B  DE C1				FADD
 0000051D  DD 1D 00004838 R			FSTP realActual
 00000523  EB 26				JMP finChar

						;si coma es 1 (verdadero), divide por 10
 00000525					decimales:
 00000525  FF 05 00004844 R			INC contCicloDecimales
 0000052B  8B 1D 00004844 R			MOV ebx, contCicloDecimales
						;ciclo de división por 10 para llegar al valor correcto
 00000531					cicloDiv:
 00000531  DC 35 0000485C R				FDIV diez
 00000537  4B					DEC ebx
 00000538  83 FB 00				CMP ebx, 0
 0000053B  75 F4				JNE cicloDiv
 0000053D  DD 05 00004838 R			FLD realActual
 00000543  DE C1				FADD
 00000545  DD 1D 00004838 R			FSTP realActual
						
 0000054B					finChar:
 0000054B  49				DEC ecx
 0000054C  83 F9 00			CMP ecx, 0
 0000054F  0F 8F FFFFFF33		JG leerChar
 00000555				finNumero:

					;guarda el número en el array
 00000555  DD 05 00004838 R		FLD realActual
 0000055B  B8 00000008			MOV eax, 8
 00000560  F7 25 00004848 R		MUL realesLeidos
 00000566  DD 98 000005AE R		FSTP numeros[eax]
 0000056C  FF 05 00004848 R		INC realesLeidos
					
					;si llegó al final del archivo, sale
 00000572  83 3D 00004850 R		CMP finArchivo, 1
	   01
 00000579  74 10			JE finLectura

					;si no ha llegado al número máximo de reales que puede almacenar, sigue leyendo
 0000057B  81 3D 00004848 R		CMP realesLeidos, maxDatos
	   00000258
 00000585  0F 8C FFFFFED2		JL leerNum
 0000058B			finLectura:

				;;;;;;;;;;;comprobar que se haya llenado correctamente el array
				;MOV edx, OFFSET numeros; para el metodo imprimirArregloReales
				;CALL imprimirArregloReales; para comprobar que leyo correctamente
				;CALL crlf
				;;;;;;;;;;;;;;;

 0000058B  E8 000004EF		CALL ordenar

				;;;;;;;;;;;;;;;;;;comprobar ordenamiento
				;MOV edx, OFFSET numeros; para el metodo imprimirArregloReales
				;CALL imprimirArregloReales; para comprobar que ordeno correctamente 
				;CALL waitmsg
				;;;;;;;;;;;;;;;

 00000590  C3			RET
 00000591			leerArchivo ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000591			calcularEstadisticos PROC
				; Calcula los estadísticos excepto los momentos, que pueden ser calculados con diferentes órdenes
				;-----------------------------------------------------------------------------------------------------------


 00000591  E8 000005CD		CALL calcMedia
 00000596  E8 00000606		CALL calcMediana
 0000059B  E8 00000646		CALL calcModa
 000005A0  E8 0000074E		CALL calcMediageometrica
 000005A5  E8 0000074A		CALL calcMediaarmonica
 000005AA  E8 00000746		CALL calcPercentiles
 000005AF  E8 00000742		CALL calcCuartiles
 000005B4  E8 0000073E		CALL calcDeciles
				;CALL calcMomentosOrigen
				;CALL calcMomentosCentrales
 000005B9  E8 0000073C		CALL calcVarianza
 000005BE  E8 00000738		CALL calcDesvEstandar
 000005C3  E8 00000734		CALL calcCuasiVarianza
 000005C8  E8 00000730		CALL calcDesvMedia
 000005CD  E8 0000072C		CALL calcDesvMediana


 000005D2  C3			RET
 000005D3			calcularEstadisticos ENDP

				;-----------------------------------------------------------------------------------------------------------
 000005D3			calcularMomentos PROC
				; Calcula los momentos según los datos que ingresó el usuario
				;-----------------------------------------------------------------------------------------------------------

 000005D3  E8 00000720		CALL calcMomentosOrigen
 000005D8  E8 0000071C		CALL calcMomentosCentrales

 000005DD  C3			RET
 000005DE			calcularMomentos ENDP

				;-----------------------------------------------------------------------------------------------------------
 000005DE			pedirEstadisticos PROC
				;Pide al usuario ingresar los estadísticos que desea
				;-----------------------------------------------------------------------------------------------------------

 000005DE  E8 00000000 E	CALL clrscr
				mWrite <"Seleccione los estad",161,"sticos que desea calcular.",0dh,0ah>
 0000643E		     1		.data		
 0000643E 53 65 6C 65 63     1		??000B BYTE "Seleccione los estad",161,"sticos que desea calcular.",0dh,0ah,0	
	   63 69 6F 6E 65
	   20 6C 6F 73 20
	   65 73 74 61 64
	   A1 73 74 69 63
	   6F 73 20 71 75
	   65 20 64 65 73
	   65 61 20 63 61
	   6C 63 75 6C 61
	   72 2E 0D 0A 00
 000005E3		     1		.code
 000005E3  52		     1		push	edx
 000005E4  BA 0000643E R     1		mov	edx,OFFSET ??000B
 000005E9  E8 00000000 E     1		call	WriteString
 000005EE  5A		     1		pop	edx
 000005EF  BA 0000034C R	MOV edx, OFFSET stringEstadisticos
 000005F4  E8 00000000 E	CALL writeString

 000005F9			seleccionEstad:
 000005F9  E8 00000000 E	CALL crlf
				mWrite <"Escriba una lista separada por comas y presione enter. Ejemplo: 1,2,3",0dh,0ah>
 00006470		     1		.data		
 00006470 45 73 63 72 69     1		??000C BYTE "Escriba una lista separada por comas y presione enter. Ejemplo: 1,2,3",0dh,0ah,0	
	   62 61 20 75 6E
	   61 20 6C 69 73
	   74 61 20 73 65
	   70 61 72 61 64
	   61 20 70 6F 72
	   20 63 6F 6D 61
	   73 20 79 20 70
	   72 65 73 69 6F
	   6E 65 20 65 6E
	   74 65 72 2E 20
	   45 6A 65 6D 70
	   6C 6F 3A 20 31
	   2C 32 2C 33 0D
	   0A 00
 000005FE		     1		.code
 000005FE  52		     1		push	edx
 000005FF  BA 00006470 R     1		mov	edx,OFFSET ??000C
 00000604  E8 00000000 E     1		call	WriteString
 00000609  5A		     1		pop	edx

 0000060A  BA 00005F80 R	MOV edx, OFFSET buferUsuario
 0000060F  B9 00000050		MOV ecx, LENGTHOF buferUsuario
 00000614  49			DEC ecx ;se deja el último caracter en 0 siempre
 00000615  E8 00000000 E	CALL readString

 0000061A  8B C8		MOV ecx, eax
 0000061C  41			INC ecx

				;interpreta la cadena ingresada (en ecx está el tamaño de la cadena + 1)
 0000061D  BE 00000000		MOV esi, 0
 00000622  B8 00000000		MOV eax, 0
 00000627			cicloUsuario:
					;si el caracter leido es una coma o se llegó al final del búfer, 
					;mueve 1 a la posición correspondiente del array de booleanos
 00000627  80 BE 00005F80 R		CMP buferUsuario[esi], 44
	   2C
 0000062E  75 15			JNE noComaUsu
 00000630					comaUsu:
 00000630  48					DEC eax
 00000631  BA 00000004				MOV edx, 4
 00000636  F7 E2				MUL edx
 00000638  F7 90 00005FD0 R			NOT boolEstadisticos[eax]
 0000063E  B8 00000000				MOV eax, 0
 00000643  EB 20				JMP continueUsu
 00000645				noComaUsu:
 00000645  80 BE 00005F80 R		CMP buferUsuario[esi], 0
	   00
 0000064C  74 E2			JE comaUsu

					;el número puede tener dos cifras. multiplica la primera por 10 y suma la siguiente
 0000064E  BB 00000000			MOV ebx, 0
 00000653  8A 9E 00005F80 R		MOV bl, buferUsuario[esi]
 00000659  83 EB 30			SUB ebx, 48
 0000065C  BA 0000000A			MOV edx, 10
 00000661  F7 E2			MUL edx
 00000663  03 C3			ADD eax, ebx

 00000665				continueUsu:
 00000665  46				INC esi
 00000666  E2 BF		LOOP cicloUsuario

 00000668  E8 0000002D		CALL mostrarEstadisticosSelec
				mWrite <"Por favor confirme su selecci",162,"n. 1=si, 0=cambiar",0dh,0ah>
 000064B8		     1		.data		
 000064B8 50 6F 72 20 66     1		??000D BYTE "Por favor confirme su selecci",162,"n. 1=si, 0=cambiar",0dh,0ah,0	
	   61 76 6F 72 20
	   63 6F 6E 66 69
	   72 6D 65 20 73
	   75 20 73 65 6C
	   65 63 63 69 A2
	   6E 2E 20 31 3D
	   73 69 2C 20 30
	   3D 63 61 6D 62
	   69 61 72 0D 0A
	   00
 0000066D		     1		.code
 0000066D  52		     1		push	edx
 0000066E  BA 000064B8 R     1		mov	edx,OFFSET ??000D
 00000673  E8 00000000 E     1		call	WriteString
 00000678  5A		     1		pop	edx
 00000679  E8 00000000 E	CALL readInt
 0000067E  E8 00000000 E	CALL crlf
 00000683  83 F8 00		CMP eax, 0
 00000686  75 11		JNE finSeleccion
				mWrite <"Indique los estad",161,"sticos que desea agregar o escriba nuevamente ",0dh,0ah,"los que desea quitar de la lista",0dh,0ah>
 000064EB		     1		.data		
 000064EB 49 6E 64 69 71     1		??000E BYTE "Indique los estad",161,"sticos que desea agregar o escriba nuevamente ",0dh,0ah,"los que desea quitar de la lista",0dh,0ah,0	
	   75 65 20 6C 6F
	   73 20 65 73 74
	   61 64 A1 73 74
	   69 63 6F 73 20
	   71 75 65 20 64
	   65 73 65 61 20
	   61 67 72 65 67
	   61 72 20 6F 20
	   65 73 63 72 69
	   62 61 20 6E 75
	   65 76 61 6D 65
	   6E 74 65 20 0D
	   0A 6C 6F 73 20
	   71 75 65 20 64
	   65 73 65 61 20
	   71 75 69 74 61
	   72 20 64 65 20
	   6C 61 20 6C 69
	   73 74 61 0D 0A
	   00
 00000688		     1		.code
 00000688  52		     1		push	edx
 00000689  BA 000064EB R     1		mov	edx,OFFSET ??000E
 0000068E  E8 00000000 E     1		call	WriteString
 00000693  5A		     1		pop	edx
 00000694  E9 FFFFFF60		JMP seleccionEstad

 00000699			finSeleccion:

 00000699  C3			RET
 0000069A			pedirEstadisticos ENDP

				;-----------------------------------------------------------------------------------------------------------
 0000069A			mostrarEstadisticosSelec PROC
				;Muestra los estadísticos seleccionados por el usuario
				;-----------------------------------------------------------------------------------------------------------
 0000069A  E8 00000000 E	CALL crlf
				mWrite <"Los ",161,"ndices no v",160,"lidos han sido ignorados",0dh,0ah>
 00006550		     1		.data		
 00006550 4C 6F 73 20 A1     1		??000F BYTE "Los ",161,"ndices no v",160,"lidos han sido ignorados",0dh,0ah,0	
	   6E 64 69 63 65
	   73 20 6E 6F 20
	   76 A0 6C 69 64
	   6F 73 20 68 61
	   6E 20 73 69 64
	   6F 20 69 67 6E
	   6F 72 61 64 6F
	   73 0D 0A 00
 0000069F		     1		.code
 0000069F  52		     1		push	edx
 000006A0  BA 00006550 R     1		mov	edx,OFFSET ??000F
 000006A5  E8 00000000 E     1		call	WriteString
 000006AA  5A		     1		pop	edx
				mWrite <"Estadisticos Seleccionados:",0dh,0ah>
 0000657C		     1		.data		
 0000657C 45 73 74 61 64     1		??0010 BYTE "Estadisticos Seleccionados:",0dh,0ah,0	
	   69 73 74 69 63
	   6F 73 20 53 65
	   6C 65 63 63 69
	   6F 6E 61 64 6F
	   73 3A 0D 0A 00
 000006AB		     1		.code
 000006AB  52		     1		push	edx
 000006AC  BA 0000657C R     1		mov	edx,OFFSET ??0010
 000006B1  E8 00000000 E     1		call	WriteString
 000006B6  5A		     1		pop	edx
 000006B7  E8 00000000 E	CALL crlf

				;si el estadístico n fue marcado (está en -1), lo imprime. De lo contrario, pasa al siguiente
 000006BC  83 3D 00005FD0 R	CMP boolEstadisticos, -1
	   FF
 000006C3  75 0C		JNE pasa2
					mwrite <"1. Media aritm",130,"tica",0dh,0ah>
 0000659A		     1		.data		
 0000659A 31 2E 20 4D 65     1		??0011 BYTE "1. Media aritm",130,"tica",0dh,0ah,0	
	   64 69 61 20 61
	   72 69 74 6D 82
	   74 69 63 61 0D
	   0A 00
 000006C5		     1		.code
 000006C5  52		     1		push	edx
 000006C6  BA 0000659A R     1		mov	edx,OFFSET ??0011
 000006CB  E8 00000000 E     1		call	WriteString
 000006D0  5A		     1		pop	edx
 000006D1			pasa2:
 000006D1  83 3D 00005FD4 R	CMP boolEstadisticos[4], -1
	   FF
 000006D8  75 0C		JNE pasa3
					mwrite <"2. Mediana",0dh,0ah>
 000065B0		     1		.data		
 000065B0 32 2E 20 4D 65     1		??0012 BYTE "2. Mediana",0dh,0ah,0	
	   64 69 61 6E 61
	   0D 0A 00
 000006DA		     1		.code
 000006DA  52		     1		push	edx
 000006DB  BA 000065B0 R     1		mov	edx,OFFSET ??0012
 000006E0  E8 00000000 E     1		call	WriteString
 000006E5  5A		     1		pop	edx
 000006E6				pasa3:
 000006E6  83 3D 00005FD8 R	CMP boolEstadisticos[8], -1
	   FF
 000006ED  75 0C		JNE pasa4
					mwrite <"3. Moda",0dh,0ah>
 000065BD		     1		.data		
 000065BD 33 2E 20 4D 6F     1		??0013 BYTE "3. Moda",0dh,0ah,0	
	   64 61 0D 0A 00
 000006EF		     1		.code
 000006EF  52		     1		push	edx
 000006F0  BA 000065BD R     1		mov	edx,OFFSET ??0013
 000006F5  E8 00000000 E     1		call	WriteString
 000006FA  5A		     1		pop	edx
 000006FB				pasa4:
 000006FB  83 3D 00005FDC R	CMP boolEstadisticos[12], -1
	   FF
 00000702  75 0C		JNE pasa5
					mwrite <"4. Media geom",130,"trica",0dh,0ah>
 000065C7		     1		.data		
 000065C7 34 2E 20 4D 65     1		??0014 BYTE "4. Media geom",130,"trica",0dh,0ah,0	
	   64 69 61 20 67
	   65 6F 6D 82 74
	   72 69 63 61 0D
	   0A 00
 00000704		     1		.code
 00000704  52		     1		push	edx
 00000705  BA 000065C7 R     1		mov	edx,OFFSET ??0014
 0000070A  E8 00000000 E     1		call	WriteString
 0000070F  5A		     1		pop	edx
 00000710			pasa5:
 00000710  83 3D 00005FE0 R	CMP boolEstadisticos[16], -1
	   FF
 00000717  75 0C		JNE pasa6
					mwrite <"5. Media arm",162,"nica",0dh,0ah>
 000065DD		     1		.data		
 000065DD 35 2E 20 4D 65     1		??0015 BYTE "5. Media arm",162,"nica",0dh,0ah,0	
	   64 69 61 20 61
	   72 6D A2 6E 69
	   63 61 0D 0A 00
 00000719		     1		.code
 00000719  52		     1		push	edx
 0000071A  BA 000065DD R     1		mov	edx,OFFSET ??0015
 0000071F  E8 00000000 E     1		call	WriteString
 00000724  5A		     1		pop	edx
 00000725			pasa6:
 00000725  83 3D 00005FE4 R	CMP boolEstadisticos[20], -1
	   FF
 0000072C  75 0C		JNE pasa7
					mwrite <"6. Percentiles",0dh,0ah>
 000065F1		     1		.data		
 000065F1 36 2E 20 50 65     1		??0016 BYTE "6. Percentiles",0dh,0ah,0	
	   72 63 65 6E 74
	   69 6C 65 73 0D
	   0A 00
 0000072E		     1		.code
 0000072E  52		     1		push	edx
 0000072F  BA 000065F1 R     1		mov	edx,OFFSET ??0016
 00000734  E8 00000000 E     1		call	WriteString
 00000739  5A		     1		pop	edx
 0000073A			pasa7:
 0000073A  83 3D 00005FE8 R	CMP boolEstadisticos[24], -1
	   FF
 00000741  75 0C		JNE pasa8
					mwrite <"7. Cuartiles",0dh,0ah>
 00006602		     1		.data		
 00006602 37 2E 20 43 75     1		??0017 BYTE "7. Cuartiles",0dh,0ah,0	
	   61 72 74 69 6C
	   65 73 0D 0A 00
 00000743		     1		.code
 00000743  52		     1		push	edx
 00000744  BA 00006602 R     1		mov	edx,OFFSET ??0017
 00000749  E8 00000000 E     1		call	WriteString
 0000074E  5A		     1		pop	edx
 0000074F			pasa8:
 0000074F  83 3D 00005FEC R	CMP boolEstadisticos[28], -1
	   FF
 00000756  75 0C		JNE pasa9
					mwrite <"8. Deciles",0dh,0ah>
 00006611		     1		.data		
 00006611 38 2E 20 44 65     1		??0018 BYTE "8. Deciles",0dh,0ah,0	
	   63 69 6C 65 73
	   0D 0A 00
 00000758		     1		.code
 00000758  52		     1		push	edx
 00000759  BA 00006611 R     1		mov	edx,OFFSET ??0018
 0000075E  E8 00000000 E     1		call	WriteString
 00000763  5A		     1		pop	edx
 00000764			pasa9:
 00000764  83 3D 00005FF0 R	CMP boolEstadisticos[32], -1
	   FF
 0000076B  75 0C		JNE pasa10
					mwrite <"9. Momentos respecto al origen",0dh,0ah>
 0000661E		     1		.data		
 0000661E 39 2E 20 4D 6F     1		??0019 BYTE "9. Momentos respecto al origen",0dh,0ah,0	
	   6D 65 6E 74 6F
	   73 20 72 65 73
	   70 65 63 74 6F
	   20 61 6C 20 6F
	   72 69 67 65 6E
	   0D 0A 00
 0000076D		     1		.code
 0000076D  52		     1		push	edx
 0000076E  BA 0000661E R     1		mov	edx,OFFSET ??0019
 00000773  E8 00000000 E     1		call	WriteString
 00000778  5A		     1		pop	edx
 00000779			pasa10:
 00000779  83 3D 00005FF4 R	CMP boolEstadisticos[36], -1
	   FF
 00000780  75 0C		JNE pasa11
					mwrite <"10. Momentos centrales o respecto a la media",0dh,0ah>
 0000663F		     1		.data		
 0000663F 31 30 2E 20 4D     1		??001A BYTE "10. Momentos centrales o respecto a la media",0dh,0ah,0	
	   6F 6D 65 6E 74
	   6F 73 20 63 65
	   6E 74 72 61 6C
	   65 73 20 6F 20
	   72 65 73 70 65
	   63 74 6F 20 61
	   20 6C 61 20 6D
	   65 64 69 61 0D
	   0A 00
 00000782		     1		.code
 00000782  52		     1		push	edx
 00000783  BA 0000663F R     1		mov	edx,OFFSET ??001A
 00000788  E8 00000000 E     1		call	WriteString
 0000078D  5A		     1		pop	edx
 0000078E			pasa11:
 0000078E  83 3D 00005FF8 R	CMP boolEstadisticos[40], -1
	   FF
 00000795  75 0C		JNE pasa12
					mwrite <"11. Varianza",0dh,0ah>
 0000666E		     1		.data		
 0000666E 31 31 2E 20 56     1		??001B BYTE "11. Varianza",0dh,0ah,0	
	   61 72 69 61 6E
	   7A 61 0D 0A 00
 00000797		     1		.code
 00000797  52		     1		push	edx
 00000798  BA 0000666E R     1		mov	edx,OFFSET ??001B
 0000079D  E8 00000000 E     1		call	WriteString
 000007A2  5A		     1		pop	edx
 000007A3			pasa12:
 000007A3  83 3D 00005FFC R	CMP boolEstadisticos[44], -1
	   FF
 000007AA  75 0C		JNE pasa13
					mwrite <"12. Desviaci",162,"n t",161,"pica",0dh,0ah>
 0000667D		     1		.data		
 0000667D 31 32 2E 20 44     1		??001C BYTE "12. Desviaci",162,"n t",161,"pica",0dh,0ah,0	
	   65 73 76 69 61
	   63 69 A2 6E 20
	   74 A1 70 69 63
	   61 0D 0A 00
 000007AC		     1		.code
 000007AC  52		     1		push	edx
 000007AD  BA 0000667D R     1		mov	edx,OFFSET ??001C
 000007B2  E8 00000000 E     1		call	WriteString
 000007B7  5A		     1		pop	edx
 000007B8			pasa13:
 000007B8  83 3D 00006000 R	CMP boolEstadisticos[48], -1
	   FF
 000007BF  75 0C		JNE pasa14
					mwrite <"13. Cuasi-varianza",0dh,0ah>
 00006695		     1		.data		
 00006695 31 33 2E 20 43     1		??001D BYTE "13. Cuasi-varianza",0dh,0ah,0	
	   75 61 73 69 2D
	   76 61 72 69 61
	   6E 7A 61 0D 0A
	   00
 000007C1		     1		.code
 000007C1  52		     1		push	edx
 000007C2  BA 00006695 R     1		mov	edx,OFFSET ??001D
 000007C7  E8 00000000 E     1		call	WriteString
 000007CC  5A		     1		pop	edx
 000007CD			pasa14:
 000007CD  83 3D 00006004 R	CMP boolEstadisticos[52], -1
	   FF
 000007D4  75 0C		JNE pasa15
					mwrite <"14. Desviaci",162,"n media respecto a la media",0dh,0ah>
 000066AA		     1		.data		
 000066AA 31 34 2E 20 44     1		??001E BYTE "14. Desviaci",162,"n media respecto a la media",0dh,0ah,0	
	   65 73 76 69 61
	   63 69 A2 6E 20
	   6D 65 64 69 61
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 20 6C 61 20
	   6D 65 64 69 61
	   0D 0A 00
 000007D6		     1		.code
 000007D6  52		     1		push	edx
 000007D7  BA 000066AA R     1		mov	edx,OFFSET ??001E
 000007DC  E8 00000000 E     1		call	WriteString
 000007E1  5A		     1		pop	edx
 000007E2			pasa15:
 000007E2  83 3D 00006008 R	CMP boolEstadisticos[56], -1
	   FF
 000007E9  75 0C		JNE pasaFin
					mwrite <"15. Desviaci",162,"n media respecto a la mediana",0dh,0ah>
 000066D5		     1		.data		
 000066D5 31 35 2E 20 44     1		??001F BYTE "15. Desviaci",162,"n media respecto a la mediana",0dh,0ah,0	
	   65 73 76 69 61
	   63 69 A2 6E 20
	   6D 65 64 69 61
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 20 6C 61 20
	   6D 65 64 69 61
	   6E 61 0D 0A 00
 000007EB		     1		.code
 000007EB  52		     1		push	edx
 000007EC  BA 000066D5 R     1		mov	edx,OFFSET ??001F
 000007F1  E8 00000000 E     1		call	WriteString
 000007F6  5A		     1		pop	edx
 000007F7			pasaFin:

				;Se reinicializan en imprimirEstadisticos
				;reinicializa el vector de booleanos
				;MOV ecx, 15
				;MOV esi, 0
				;ponerCeroSiguiente:
				;	MOV boolEstadisticos[esi], 0
				;	ADD esi, 4
				;LOOP ponerCeroSiguiente


 000007F7  C3			RET
 000007F8			mostrarEstadisticosSelec ENDP

				;-----------------------------------------------------------------------------------------------------------
 000007F8			imprimirEstadisticosSelec PROC
				;Imprime el valor o arreglo correspondiente al estadistico seleccionado
				;-----------------------------------------------------------------------------------------------------------
				;si el estadístico n fue marcado (está en -1), lo imprime. De lo contrario, pasa al siguiente
 000007F8  83 3D 00005FD0 R	CMP boolEstadisticos, -1
	   FF
 000007FF  75 16		JNE pasa2
					mwrite <"1. Media aritm",130,"tica",0dh,0ah>
 00006702		     1		.data		
 00006702 31 2E 20 4D 65     1		??0020 BYTE "1. Media aritm",130,"tica",0dh,0ah,0	
	   64 69 61 20 61
	   72 69 74 6D 82
	   74 69 63 61 0D
	   0A 00
 00000801		     1		.code
 00000801  52		     1		push	edx
 00000802  BA 00006702 R     1		mov	edx,OFFSET ??0020
 00000807  E8 00000000 E     1		call	WriteString
 0000080C  5A		     1		pop	edx
 0000080D  BA 000048AC R		MOV edx, OFFSET media
 00000812  E8 000001EA			CALL imprimirDato
 00000817			pasa2:
 00000817  83 3D 00005FD4 R	CMP boolEstadisticos[4], -1
	   FF
 0000081E  75 16		JNE pasa3
					mwrite <"2. Mediana",0dh,0ah>
 00006718		     1		.data		
 00006718 32 2E 20 4D 65     1		??0021 BYTE "2. Mediana",0dh,0ah,0	
	   64 69 61 6E 61
	   0D 0A 00
 00000820		     1		.code
 00000820  52		     1		push	edx
 00000821  BA 00006718 R     1		mov	edx,OFFSET ??0021
 00000826  E8 00000000 E     1		call	WriteString
 0000082B  5A		     1		pop	edx
 0000082C  BA 000048B4 R		MOV edx, OFFSET mediana 
 00000831  E8 000001CB			CALL imprimirDato
 00000836			pasa3:
 00000836  83 3D 00005FD8 R	CMP boolEstadisticos[8], -1
	   FF
 0000083D  75 16		JNE pasa4
					mwrite <"3. Moda",0dh,0ah>
 00006725		     1		.data		
 00006725 33 2E 20 4D 6F     1		??0022 BYTE "3. Moda",0dh,0ah,0	
	   64 61 0D 0A 00
 0000083F		     1		.code
 0000083F  52		     1		push	edx
 00000840  BA 00006725 R     1		mov	edx,OFFSET ??0022
 00000845  E8 00000000 E     1		call	WriteString
 0000084A  5A		     1		pop	edx
 0000084B  BA 000048BC R		MOV edx, OFFSET moda 
 00000850  E8 000001D4			CALL imprimirArregloReales
 00000855			pasa4:
 00000855  83 3D 00005FDC R	CMP boolEstadisticos[12], -1
	   FF
 0000085C  75 16		JNE pasa5
					mwrite <"4. Media geom",130,"trica",0dh,0ah>
 0000672F		     1		.data		
 0000672F 34 2E 20 4D 65     1		??0023 BYTE "4. Media geom",130,"trica",0dh,0ah,0	
	   64 69 61 20 67
	   65 6F 6D 82 74
	   72 69 63 61 0D
	   0A 00
 0000085E		     1		.code
 0000085E  52		     1		push	edx
 0000085F  BA 0000672F R     1		mov	edx,OFFSET ??0023
 00000864  E8 00000000 E     1		call	WriteString
 00000869  5A		     1		pop	edx
 0000086A  BA 00005B84 R		MOV edx, OFFSET mediageometrica  
 0000086F  E8 0000018D			CALL imprimirDato
 00000874			pasa5:
 00000874  83 3D 00005FE0 R	CMP boolEstadisticos[16], -1
	   FF
 0000087B  75 16		JNE pasa6
					mwrite <"5. Media arm",162,"nica",0dh,0ah>
 00006745		     1		.data		
 00006745 35 2E 20 4D 65     1		??0024 BYTE "5. Media arm",162,"nica",0dh,0ah,0	
	   64 69 61 20 61
	   72 6D A2 6E 69
	   63 61 0D 0A 00
 0000087D		     1		.code
 0000087D  52		     1		push	edx
 0000087E  BA 00006745 R     1		mov	edx,OFFSET ??0024
 00000883  E8 00000000 E     1		call	WriteString
 00000888  5A		     1		pop	edx
 00000889  BA 00005B8C R		MOV edx, OFFSET mediaarmonica   
 0000088E  E8 0000016E			CALL imprimirDato
 00000893			pasa6:
 00000893  83 3D 00005FE4 R	CMP boolEstadisticos[20], -1
	   FF
 0000089A  75 16		JNE pasa7
					mwrite <"6. Percentiles",0dh,0ah>
 00006759		     1		.data		
 00006759 36 2E 20 50 65     1		??0025 BYTE "6. Percentiles",0dh,0ah,0	
	   72 63 65 6E 74
	   69 6C 65 73 0D
	   0A 00
 0000089C		     1		.code
 0000089C  52		     1		push	edx
 0000089D  BA 00006759 R     1		mov	edx,OFFSET ??0025
 000008A2  E8 00000000 E     1		call	WriteString
 000008A7  5A		     1		pop	edx
 000008A8  BA 00005B94 R		MOV edx, OFFSET percentiles  
 000008AD  E8 00000177			CALL imprimirArregloReales
 000008B2			pasa7:
 000008B2  83 3D 00005FE8 R	CMP boolEstadisticos[24], -1
	   FF
 000008B9  75 16		JNE pasa8
					mwrite <"7. Cuartiles",0dh,0ah>
 0000676A		     1		.data		
 0000676A 37 2E 20 43 75     1		??0026 BYTE "7. Cuartiles",0dh,0ah,0	
	   61 72 74 69 6C
	   65 73 0D 0A 00
 000008BB		     1		.code
 000008BB  52		     1		push	edx
 000008BC  BA 0000676A R     1		mov	edx,OFFSET ??0026
 000008C1  E8 00000000 E     1		call	WriteString
 000008C6  5A		     1		pop	edx
 000008C7  BA 00005EBC R		MOV edx, OFFSET cuartiles   
 000008CC  E8 00000158			CALL imprimirArregloReales
 000008D1			pasa8:
 000008D1  83 3D 00005FEC R	CMP boolEstadisticos[28], -1
	   FF
 000008D8  75 16		JNE pasa9
					mwrite <"8. Deciles",0dh,0ah>
 00006779		     1		.data		
 00006779 38 2E 20 44 65     1		??0027 BYTE "8. Deciles",0dh,0ah,0	
	   63 69 6C 65 73
	   0D 0A 00
 000008DA		     1		.code
 000008DA  52		     1		push	edx
 000008DB  BA 00006779 R     1		mov	edx,OFFSET ??0027
 000008E0  E8 00000000 E     1		call	WriteString
 000008E5  5A		     1		pop	edx
 000008E6  BA 00005EE4 R		MOV edx, OFFSET deciles    
 000008EB  E8 00000139			CALL imprimirArregloReales
 000008F0			pasa9:
 000008F0  83 3D 00005FF0 R	CMP boolEstadisticos[32], -1
	   FF
 000008F7  75 25		JNE pasa10
					mwrite <"9. Momento respecto al origen de orden ">
 00006786		     1		.data		
 00006786 39 2E 20 4D 6F     1		??0028 BYTE "9. Momento respecto al origen de orden ",0	
	   6D 65 6E 74 6F
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 6C 20 6F 72
	   69 67 65 6E 20
	   64 65 20 6F 72
	   64 65 6E 20 00
 000008F9		     1		.code
 000008F9  52		     1		push	edx
 000008FA  BA 00006786 R     1		mov	edx,OFFSET ??0028
 000008FF  E8 00000000 E     1		call	WriteString
 00000904  5A		     1		pop	edx
 00000905  A1 00005F74 R		MOV eax, ordenMomOrig
 0000090A  E8 00000000 E		CALL writeDec
 0000090F  E8 00000000 E		CALL crlf
 00000914  BA 00005F3C R		MOV edx, OFFSET momentosOrigen    
 00000919  E8 000000E3			CALL imprimirDato
 0000091E			pasa10:
 0000091E  83 3D 00005FF4 R	CMP boolEstadisticos[36], -1
	   FF
 00000925  75 25		JNE pasa11
					mwrite <"10. Momento central o respecto a la media de orden ">
 000067AE		     1		.data		
 000067AE 31 30 2E 20 4D     1		??0029 BYTE "10. Momento central o respecto a la media de orden ",0	
	   6F 6D 65 6E 74
	   6F 20 63 65 6E
	   74 72 61 6C 20
	   6F 20 72 65 73
	   70 65 63 74 6F
	   20 61 20 6C 61
	   20 6D 65 64 69
	   61 20 64 65 20
	   6F 72 64 65 6E
	   20 00
 00000927		     1		.code
 00000927  52		     1		push	edx
 00000928  BA 000067AE R     1		mov	edx,OFFSET ??0029
 0000092D  E8 00000000 E     1		call	WriteString
 00000932  5A		     1		pop	edx
 00000933  A1 00005F78 R		MOV eax, ordenMomCent
 00000938  E8 00000000 E		CALL writeDec
 0000093D  E8 00000000 E		CALL crlf
 00000942  BA 00005F44 R		MOV edx, OFFSET momentosCentrales     
 00000947  E8 000000B5			CALL imprimirDato
 0000094C			pasa11:
 0000094C  83 3D 00005FF8 R	CMP boolEstadisticos[40], -1
	   FF
 00000953  75 16		JNE pasa12
					mwrite <"11. Varianza",0dh,0ah>
 000067E2		     1		.data		
 000067E2 31 31 2E 20 56     1		??002A BYTE "11. Varianza",0dh,0ah,0	
	   61 72 69 61 6E
	   7A 61 0D 0A 00
 00000955		     1		.code
 00000955  52		     1		push	edx
 00000956  BA 000067E2 R     1		mov	edx,OFFSET ??002A
 0000095B  E8 00000000 E     1		call	WriteString
 00000960  5A		     1		pop	edx
 00000961  BA 00005F4C R		MOV edx, OFFSET varianza      
 00000966  E8 00000096			CALL imprimirDato
 0000096B			pasa12:
 0000096B  83 3D 00005FFC R	CMP boolEstadisticos[44], -1
	   FF
 00000972  75 16		JNE pasa13
					mwrite <"12. Desviaci",162,"n t",161,"pica",0dh,0ah>
 000067F1		     1		.data		
 000067F1 31 32 2E 20 44     1		??002B BYTE "12. Desviaci",162,"n t",161,"pica",0dh,0ah,0	
	   65 73 76 69 61
	   63 69 A2 6E 20
	   74 A1 70 69 63
	   61 0D 0A 00
 00000974		     1		.code
 00000974  52		     1		push	edx
 00000975  BA 000067F1 R     1		mov	edx,OFFSET ??002B
 0000097A  E8 00000000 E     1		call	WriteString
 0000097F  5A		     1		pop	edx
 00000980  BA 00005F54 R		MOV edx, OFFSET desvEstandar       
 00000985  E8 00000077			CALL imprimirDato
 0000098A			pasa13:
 0000098A  83 3D 00006000 R	CMP boolEstadisticos[48], -1
	   FF
 00000991  75 16		JNE pasa14
					mwrite <"13. Cuasi-varianza",0dh,0ah>
 00006809		     1		.data		
 00006809 31 33 2E 20 43     1		??002C BYTE "13. Cuasi-varianza",0dh,0ah,0	
	   75 61 73 69 2D
	   76 61 72 69 61
	   6E 7A 61 0D 0A
	   00
 00000993		     1		.code
 00000993  52		     1		push	edx
 00000994  BA 00006809 R     1		mov	edx,OFFSET ??002C
 00000999  E8 00000000 E     1		call	WriteString
 0000099E  5A		     1		pop	edx
 0000099F  BA 00005F5C R		MOV edx, OFFSET cuasiVarianza        
 000009A4  E8 00000058			CALL imprimirDato
 000009A9			pasa14:
 000009A9  83 3D 00006004 R	CMP boolEstadisticos[52], -1
	   FF
 000009B0  75 16		JNE pasa15
					mwrite <"14. Desviaci",162,"n media respecto a la media",0dh,0ah>
 0000681E		     1		.data		
 0000681E 31 34 2E 20 44     1		??002D BYTE "14. Desviaci",162,"n media respecto a la media",0dh,0ah,0	
	   65 73 76 69 61
	   63 69 A2 6E 20
	   6D 65 64 69 61
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 20 6C 61 20
	   6D 65 64 69 61
	   0D 0A 00
 000009B2		     1		.code
 000009B2  52		     1		push	edx
 000009B3  BA 0000681E R     1		mov	edx,OFFSET ??002D
 000009B8  E8 00000000 E     1		call	WriteString
 000009BD  5A		     1		pop	edx
 000009BE  BA 00005F64 R		MOV edx, OFFSET desvMedia         
 000009C3  E8 00000039			CALL imprimirDato
 000009C8			pasa15:
 000009C8  83 3D 00006008 R	CMP boolEstadisticos[56], -1
	   FF
 000009CF  75 16		JNE pasaFin
					mwrite <"15. Desviaci",162,"n media respecto a la mediana",0dh,0ah>
 00006849		     1		.data		
 00006849 31 35 2E 20 44     1		??002E BYTE "15. Desviaci",162,"n media respecto a la mediana",0dh,0ah,0	
	   65 73 76 69 61
	   63 69 A2 6E 20
	   6D 65 64 69 61
	   20 72 65 73 70
	   65 63 74 6F 20
	   61 20 6C 61 20
	   6D 65 64 69 61
	   6E 61 0D 0A 00
 000009D1		     1		.code
 000009D1  52		     1		push	edx
 000009D2  BA 00006849 R     1		mov	edx,OFFSET ??002E
 000009D7  E8 00000000 E     1		call	WriteString
 000009DC  5A		     1		pop	edx
 000009DD  BA 00005F6C R		MOV edx, OFFSET desvMediana          
 000009E2  E8 0000001A			CALL imprimirDato
 000009E7			pasaFin:

				;reinicializa el vector de booleanos
 000009E7  B9 0000000F		MOV ecx, 15
 000009EC  BE 00000000		MOV esi, 0
 000009F1			ponerCeroSiguiente:
 000009F1  C7 86 00005FD0 R		MOV boolEstadisticos[esi], 0
	   00000000
 000009FB  83 C6 04			ADD esi, 4
 000009FE  E2 F1		LOOP ponerCeroSiguiente

 00000A00  C3			RET
 00000A01			imprimirEstadisticosSelec ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000A01			imprimirDato PROC
				;Muestra un único dato
				;Para este metodo la direccion del Datos debe estar en el registro edx
				;-----------------------------------------------------------------------------------------------------------
 00000A01  8B 32			MOV esi,[edx]
 00000A03  89 35 000048A4 R		MOV DWORD PTR numeroReal,esi
 00000A09  8B 72 04			MOV esi,[edx+4]
 00000A0C  89 35 000048A8 R		MOV DWORD PTR numeroReal[4],esi
 00000A12  DD 05 000048A4 R		FLD numeroReal
 00000A18  E8 00000000 E		CALL WriteFloat
 00000A1D  E8 00000000 E		CALL Crlf
 00000A22  DD 1D 000048A4 R		FSTP numeroReal

 00000A28  C3			RET
 00000A29			imprimirDato ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000A29			imprimirArregloReales PROC
				;Muestra un arreglo de datos. La primera posición debe encontrarse en el reg EDX
				;ceroReal REAL8 0.
				;numeroReal REAL8 0.
				;-----------------------------------------------------------------------------------------------------------
 00000A29  BB 00000000		MOV ebx,0
 00000A2E			ImprimirReal:
 00000A2E  8B 34 13			MOV esi,[edx+ebx]
 00000A31  89 35 000048A4 R		MOV DWORD PTR numeroReal,esi
 00000A37  8B 74 13 04			MOV esi,[edx+ebx+4]
 00000A3B  89 35 000048A8 R		MOV DWORD PTR numeroReal[4],esi
 00000A41  DD 05 000048A4 R		FLD numeroReal
 00000A47  E8 00000000 E		CALL WriteFloat
 00000A4C  E8 00000000 E		CALL Crlf
 00000A51  DD 1D 000048A4 R		FSTP numeroReal
					;CALL waitMsg
 00000A57  83 C3 08			ADD ebx,8
 00000A5A  8B 34 13		MOV esi,[edx+ebx]
 00000A5D  89 35 000048A4 R	MOV DWORD PTR numeroReal,esi
 00000A63  8B 74 13 04		MOV esi,[edx+ebx+4]
 00000A67  89 35 000048A8 R	MOV DWORD PTR numeroReal[4],esi
 00000A6D  DD 05 000048A4 R	FLD numeroReal
 00000A73  DC 1D 0000489C R	FCOMP ceroReal ; compara ST(0) con cero
 00000A79  DF E0		FNSTSW ax ; mueve la palabra de estado hacia AX
 00000A7B  9E			SAHF ; copia AH a EFLAGS
 00000A7C  73 B0		JNB ImprimirReal
				;CALL waitMsg
 00000A7E  C3			RET
 00000A7F			imprimirArregloReales ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000A7F			ordenar PROC
				;Ordena el vector y calcula las frecuencias
				;posActual DWORD 0
				;indiceCicloOrdenar DWORD 0
				;indiceCicloComparar DWORD 0
				;posMenor DWORD 0
				;menorValor REAL8 0.
				;-----------------------------------------------------------------------------------------------------------

 00000A7F  C7 05 0000487C R	MOV posActual, 0
	   00000000
 00000A89			CicloOrdenar:
 00000A89  A1 0000487C R		MOV eax, posActual
 00000A8E  A3 00004898 R		MOV posMenor, eax ;establece la posición del menor en la actual
 00000A93  B8 00000008			MOV eax,8
 00000A98  F7 25 0000487C R		MUL posActual
 00000A9E  DD 80 000005AE R		FLD numeros[eax]
 00000AA4  DD 1D 00004888 R		FSTP menorValor;inicia menorValor en el valor de la posicion actual
 00000AAA  8B 35 0000487C R		MOV esi,posActual
 00000AB0  46				INC esi
 00000AB1  89 35 00004884 R		MOV indiceCicloComparar,esi; este ciclo inicia en posActual+1
 00000AB7				CicloComparar:
 00000AB7  B8 00000008				MOV eax,8
 00000ABC  F7 25 00004884 R			MUL indiceCicloComparar
 00000AC2  DD 80 000005AE R			FLD numeros[eax] ; ST(0) = numeros[eax]
 00000AC8  DC 1D 00004888 R			FCOMP menorValor ; compara ST(0) con menorValor y desapila
 00000ACE  DF E0				FNSTSW ax ; mueve la palabra de estado hacia AX
 00000AD0  9E					SAHF ; copia AH a EFLAGS
 00000AD1  77 23				JA esMayor
 00000AD3  B8 00000008					MOV eax,8
 00000AD8  F7 25 00004884 R				MUL indiceCicloComparar
 00000ADE  DD 80 000005AE R				FLD numeros[eax]
 00000AE4  DD 1D 00004888 R				FSTP menorValor
 00000AEA  8B 35 00004884 R				MOV esi, indiceCicloComparar
 00000AF0  89 35 00004898 R				MOV posMenor,esi
 00000AF6					esMayor:

 00000AF6  FF 05 00004884 R		INC indiceCicloComparar
 00000AFC  8B 35 00004848 R		MOV esi,realesLeidos
 00000B02  39 35 00004884 R		CMP indiceCicloComparar,esi
 00000B08  7C AD			JL CicloComparar; el ciclo termina en la ultima posicion del vector
					;FinCicloComparar

					;Intercambio de posiciones
					
 00000B0A  DD 05 00004888 R		FLD menorValor ;st(0) = menor
 00000B10  B8 00000008			MOV eax,8
 00000B15  F7 25 0000487C R		MUL posActual
 00000B1B  DD 80 000005AE R		FLD numeros[eax] ;st(0) = numPosActual, st(1) = menor
 00000B21  B8 00000008			MOV eax,8
 00000B26  F7 25 00004898 R		MUL posMenor
 00000B2C  DD 98 000005AE R		FSTP numeros[eax]; desapila la posicion actual, st(0)= menorValor
 00000B32  B8 00000008			MOV eax,8
 00000B37  F7 25 0000487C R		MUL posActual
 00000B3D  DD 98 000005AE R		FSTP numeros[eax];desapila menorValor
					;Fin intercambio

 00000B43  FF 05 0000487C R		INC posActual

 00000B49  FF 05 00004880 R	INC indiceCicloOrdenar
 00000B4F  8B 35 00004848 R	MOV esi,realesLeidos
 00000B55  4E			DEC esi ;llega hasta el número de reales leídos - 1
 00000B56  39 35 00004880 R	CMP indiceCicloOrdenar,esi
 00000B5C  0F 8C FFFFFF27	JL CicloOrdenar

 00000B62  C3			RET
 00000B63			ordenar ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000B63			calcMedia PROC
				;Calcula el estadístico
				;auxSumatoria REAL8 0.
				;-----------------------------------------------------------------------------------------------------------

 00000B63  C7 05 0000487C R	MOV posActual, 0
	   00000000
 00000B6D  D9 EE		FLDZ
				;sumatoria
 00000B6F			cicloMedia:
 00000B6F  8B 35 0000487C R		MOV esi, posActual
 00000B75  DD 04 F5			FLD numeros[esi*8]
	   000005AE R
 00000B7C  DE C1			FADD
 00000B7E  FF 05 0000487C R	INC posActual
 00000B84  8B 35 00004848 R	MOV esi, realesLeidos
 00000B8A  39 35 0000487C R	CMP posActual, esi
 00000B90  7C DD		JL cicloMedia
				;división
 00000B92  DB 05 00004848 R	FILD realesLeidos
 00000B98  DE F9		FDIV
 00000B9A  DD 1D 000048AC R	FSTP media

 00000BA0  C3			RET
 00000BA1			calcMedia ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000BA1			calcMediana PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

				;ve si la cantidad de datos es par o impar
 00000BA1  BB 00000002		MOV ebx, 2
 00000BA6  BA 00000000		MOV edx, 0
 00000BAB  A1 00004848 R	MOV eax, realesLeidos

 00000BB0  F7 F3		DIV ebx

 00000BB2  66| 83 FA 00		CMP dx, 0
 00000BB6  75 20		JNE noEsPar
					;la mediana es el promedio entre los datos en las posiciones (realesleidos/2) y (realesleidos/2)+1
 00000BB8  DD 04 C5			FLD numeros[eax*8] ;(realesleidos/2)+1
	   000005AE R
 00000BBF  DD 04 C5			FLD numeros[eax*8-8] ;(realesleidos/2)
	   000005A6 R
 00000BC6  DE C1			FADD
 00000BC8  DD 05 00004864 R		FLD numDos
 00000BCE  DE F9			FDIV
 00000BD0  DD 1D 000048B4 R		FSTP mediana
 00000BD6  EB 0D			JMP  finMediana
 00000BD8			noEsPar:

				;la mediana es el dato en la posición roof(realesleidos/2)=eax+1
 00000BD8  DD 04 C5		FLD numeros[eax*8]
	   000005AE R
 00000BDF  DD 1D 000048B4 R	FSTP mediana

 00000BE5			finMediana:

 00000BE5  C3			RET
 00000BE6			calcMediana ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000BE6			calcModa PROC
				;Calcula el estadístico
				;numeros REAL8 maxDatos DUP(-1.), -1.
				;numerosDistintos REAL8 maxDatos DUP(-1.), -1.
				;frecuencias DWORD maxDatos DUP(-1.), -1.
				;cantDatosDistintos DWORD 0
				;frecuenciaMax DWORD 0 ;para la moda
				;posActual DWORD
				;posModa DWORD 0
				;-----------------------------------------------------------------------------------------------------------

				;carga el primero
 00000BE6  DD 05 000005AE R	FLD numeros
 00000BEC  DD 15 00004838 R	FST realActual
 00000BF2  DD 1D 00001876 R	FSTP numerosDistintos
 00000BF8  FF 05 000034A6 R	INC frecuenciaMax
 00000BFE  FF 05 00002B3E R	INC frecuencias
 00000C04  FF 05 000034A2 R	INC cantDatosDistintos
 00000C0A  C7 05 0000487C R	MOV posActual, 1
	   00000001
 00000C14  C7 05 00005F7C R	MOV posModa, 0
	   00000000

 00000C1E			cicloFrecu:
					
 00000C1E  8B 35 0000487C R		MOV esi, posActual
 00000C24  DD 04 F5			FLD numeros[esi*8]
	   000005AE R
 00000C2B  DC 1D 00004838 R		FCOMP realActual
 00000C31  DF E0			FNSTSW ax ; mueve la palabra de estado hacia AX
 00000C33  9E				SAHF ; copia AH a EFLAGS
 00000C34  75 24			JNE diferente
						;si el dato siguiente es igual al dato actual del array sin repetidos:
 00000C36  8B 35 00005F7C R			MOV esi, posModa
 00000C3C  FF 04 B5				INC frecuencias[esi*4]
	   00002B3E R
 00000C43  8B 04 B5				MOV eax, frecuencias[esi*4]
	   00002B3E R
 00000C4A  39 05 000034A6 R			CMP frecuenciaMax, eax
 00000C50  7D 35				JGE finCompFrec ;si la frecuencia máxima es mayor o igual a la del dato actual, no cambia
 00000C52  FF 05 000034A6 R				INC frecuenciaMax
 00000C58  EB 2D				JMP finCompFrec
 00000C5A				diferente:
 00000C5A  DD 04 F5				FLD numeros[esi*8]
	   000005AE R
 00000C61  DD 15 00004838 R			FST realActual
 00000C67  FF 05 00005F7C R			INC posModa
 00000C6D  8B 35 00005F7C R			MOV esi, posModa
 00000C73  DD 1C F5				FSTP numerosDistintos[esi*8]
	   00001876 R
 00000C7A  FF 04 B5				INC frecuencias[esi*4]
	   00002B3E R
 00000C81  FF 05 000034A2 R			INC cantDatosDistintos
 00000C87				finCompFrec:

 00000C87  FF 05 0000487C R	INC posActual
 00000C8D  8B 1D 00004848 R	MOV ebx, realesLeidos
 00000C93  39 1D 0000487C R	CMP posActual, ebx
 00000C99  7C 83		JL cicloFrecu

				;pasa los datos con frecuencia==frecuenciaMax al vector moda
 00000C9B  C7 05 0000487C R	MOV posActual, 0
	   00000000
 00000CA5  C7 05 00005F7C R	MOV posModa, 0
	   00000000
 00000CAF			cicloModa:
 00000CAF  8B 35 0000487C R		MOV esi, posActual
 00000CB5  8B 04 B5			MOV eax, frecuencias[esi*4]
	   00002B3E R
 00000CBC  39 05 000034A6 R		CMP frecuenciaMax, eax
 00000CC2  75 1A			JNE noEsModa
 00000CC4  8B 1D 00005F7C R			MOV ebx, posModa
 00000CCA  DD 04 F5				FLD numerosDistintos[esi*8]
	   00001876 R
 00000CD1  DD 1C DD				FSTP moda[ebx*8]
	   000048BC R
 00000CD8  FF 05 00005F7C R			INC posModa
 00000CDE				noEsModa:
 00000CDE  FF 05 0000487C R	INC posActual
 00000CE4  8B 35 000034A2 R	MOV esi, cantDatosDistintos
 00000CEA  39 35 0000487C R	CMP posActual, esi
 00000CF0  7C BD		JL cicloModa

 00000CF2  C3			RET
 00000CF3			calcModa ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CF3			calcMediageometrica PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CF3  C3			RET
 00000CF4			calcMediageometrica ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CF4			calcMediaarmonica PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CF4  C3			RET
 00000CF5			calcMediaarmonica ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CF5			calcPercentiles PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CF5  C3			RET
 00000CF6			calcPercentiles ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CF6			calcCuartiles PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CF6  C3			RET
 00000CF7			calcCuartiles ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CF7			calcDeciles PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CF7  C3			RET
 00000CF8			calcDeciles ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CF8			calcMomentosOrigen PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CF8  C3			RET
 00000CF9			calcMomentosOrigen ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CF9			calcMomentosCentrales PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CF9  C3			RET
 00000CFA			calcMomentosCentrales ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CFA			calcVarianza PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CFA  C3			RET
 00000CFB			calcVarianza ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CFB			calcDesvEstandar PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CFB  C3			RET
 00000CFC			calcDesvEstandar ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CFC			calcCuasiVarianza PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CFC  C3			RET
 00000CFD			calcCuasiVarianza ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CFD			calcDesvMedia PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CFD  C3			RET
 00000CFE			calcDesvMedia ENDP

				;-----------------------------------------------------------------------------------------------------------
 00000CFE			calcDesvMediana PROC
				;Calcula el estadístico
				;-----------------------------------------------------------------------------------------------------------

 00000CFE  C3			RET
 00000CFF			calcDesvMediana ENDP

				;fin del programa
				END main
Microsoft (R) Macro Assembler Version 10.00.30319.01	    06/11/14 13:57:46
ESTADÍSTICAS						(main.asm  Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000400 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00006876 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000CFF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
animarBarra  . . . . . . . . . .	P Near	 000002BF _TEXT	Length= 00000044 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002CD _TEXT	
  menor6 . . . . . . . . . . . .	L Near	 000002F2 _TEXT	
  finsi  . . . . . . . . . . . .	L Near	 000002FE _TEXT	
calcCuartiles  . . . . . . . . .	P Near	 00000CF6 _TEXT	Length= 00000001 Public STDCALL
calcCuasiVarianza  . . . . . . .	P Near	 00000CFC _TEXT	Length= 00000001 Public STDCALL
calcDeciles  . . . . . . . . . .	P Near	 00000CF7 _TEXT	Length= 00000001 Public STDCALL
calcDesvEstandar . . . . . . . .	P Near	 00000CFB _TEXT	Length= 00000001 Public STDCALL
calcDesvMediana  . . . . . . . .	P Near	 00000CFE _TEXT	Length= 00000001 Public STDCALL
calcDesvMedia  . . . . . . . . .	P Near	 00000CFD _TEXT	Length= 00000001 Public STDCALL
calcMediaarmonica  . . . . . . .	P Near	 00000CF4 _TEXT	Length= 00000001 Public STDCALL
calcMediageometrica  . . . . . .	P Near	 00000CF3 _TEXT	Length= 00000001 Public STDCALL
calcMediana  . . . . . . . . . .	P Near	 00000BA1 _TEXT	Length= 00000045 Public STDCALL
  noEsPar  . . . . . . . . . . .	L Near	 00000BD8 _TEXT	
  finMediana . . . . . . . . . .	L Near	 00000BE5 _TEXT	
calcMedia  . . . . . . . . . . .	P Near	 00000B63 _TEXT	Length= 0000003E Public STDCALL
  cicloMedia . . . . . . . . . .	L Near	 00000B6F _TEXT	
calcModa . . . . . . . . . . . .	P Near	 00000BE6 _TEXT	Length= 0000010D Public STDCALL
  cicloFrecu . . . . . . . . . .	L Near	 00000C1E _TEXT	
  diferente  . . . . . . . . . .	L Near	 00000C5A _TEXT	
  finCompFrec  . . . . . . . . .	L Near	 00000C87 _TEXT	
  cicloModa  . . . . . . . . . .	L Near	 00000CAF _TEXT	
  noEsModa . . . . . . . . . . .	L Near	 00000CDE _TEXT	
calcMomentosCentrales  . . . . .	P Near	 00000CF9 _TEXT	Length= 00000001 Public STDCALL
calcMomentosOrigen . . . . . . .	P Near	 00000CF8 _TEXT	Length= 00000001 Public STDCALL
calcPercentiles  . . . . . . . .	P Near	 00000CF5 _TEXT	Length= 00000001 Public STDCALL
calcVarianza . . . . . . . . . .	P Near	 00000CFA _TEXT	Length= 00000001 Public STDCALL
calcularEstadisticos . . . . . .	P Near	 00000591 _TEXT	Length= 00000042 Public STDCALL
calcularMomentos . . . . . . . .	P Near	 000005D3 _TEXT	Length= 0000000B Public STDCALL
cargarMensaje  . . . . . . . . .	P Near	 000000D5 _TEXT	Length= 000000BF Public STDCALL
contadorEjec . . . . . . . . . .	P Near	 00000303 _TEXT	Length= 0000004E Public STDCALL
  noUno  . . . . . . . . . . . .	L Near	 00000339 _TEXT	
  todos  . . . . . . . . . . . .	L Near	 00000345 _TEXT	
  ceroEjec . . . . . . . . . . .	L Near	 0000034A _TEXT	
imprimirArregloReales  . . . . .	P Near	 00000A29 _TEXT	Length= 00000056 Public STDCALL
  ImprimirReal . . . . . . . . .	L Near	 00000A2E _TEXT	
imprimirDato . . . . . . . . . .	P Near	 00000A01 _TEXT	Length= 00000028 Public STDCALL
imprimirEstadisticosSelec  . . .	P Near	 000007F8 _TEXT	Length= 00000209 Public STDCALL
  pasa2  . . . . . . . . . . . .	L Near	 00000817 _TEXT	
  pasa3  . . . . . . . . . . . .	L Near	 00000836 _TEXT	
  pasa4  . . . . . . . . . . . .	L Near	 00000855 _TEXT	
  pasa5  . . . . . . . . . . . .	L Near	 00000874 _TEXT	
  pasa6  . . . . . . . . . . . .	L Near	 00000893 _TEXT	
  pasa7  . . . . . . . . . . . .	L Near	 000008B2 _TEXT	
  pasa8  . . . . . . . . . . . .	L Near	 000008D1 _TEXT	
  pasa9  . . . . . . . . . . . .	L Near	 000008F0 _TEXT	
  pasa10 . . . . . . . . . . . .	L Near	 0000091E _TEXT	
  pasa11 . . . . . . . . . . . .	L Near	 0000094C _TEXT	
  pasa12 . . . . . . . . . . . .	L Near	 0000096B _TEXT	
  pasa13 . . . . . . . . . . . .	L Near	 0000098A _TEXT	
  pasa14 . . . . . . . . . . . .	L Near	 000009A9 _TEXT	
  pasa15 . . . . . . . . . . . .	L Near	 000009C8 _TEXT	
  pasaFin  . . . . . . . . . . .	L Near	 000009E7 _TEXT	
  ponerCeroSiguiente . . . . . .	L Near	 000009F1 _TEXT	
leerArchivo  . . . . . . . . . .	P Near	 000003C2 _TEXT	Length= 000001CF Public STDCALL
  preguntaRuta . . . . . . . . .	L Near	 000003DD _TEXT	
  file_ok  . . . . . . . . . . .	L Near	 0000040E _TEXT	
  check_buffer_size  . . . . . .	L Near	 00000432 _TEXT	
  buf_size_ok  . . . . . . . . .	L Near	 00000447 _TEXT	
  leerNum  . . . . . . . . . . .	L Near	 0000045D _TEXT	
  leerChar . . . . . . . . . . .	L Near	 00000488 _TEXT	
  noFinArchivo . . . . . . . . .	L Near	 000004A7 _TEXT	
  noCr . . . . . . . . . . . . .	L Near	 000004C3 _TEXT	
  noLf . . . . . . . . . . . . .	L Near	 000004D8 _TEXT	
  noEsComa . . . . . . . . . . .	L Near	 000004E8 _TEXT	
  noEsPunto  . . . . . . . . . .	L Near	 000004F8 _TEXT	
  decimales  . . . . . . . . . .	L Near	 00000525 _TEXT	
  cicloDiv . . . . . . . . . . .	L Near	 00000531 _TEXT	
  finChar  . . . . . . . . . . .	L Near	 0000054B _TEXT	
  finNumero  . . . . . . . . . .	L Near	 00000555 _TEXT	
  finLectura . . . . . . . . . .	L Near	 0000058B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D5 Public STDCALL
  inicio . . . . . . . . . . . .	L Near	 0000001C _TEXT	
  ejec . . . . . . . . . . . . .	L Near	 00000044 _TEXT	
mostrarDespedida . . . . . . . .	P Near	 00000351 _TEXT	Length= 00000071 Public STDCALL
  CICLOFIN . . . . . . . . . . .	L Near	 0000038E _TEXT	
mostrarEstadisticosSelec . . . .	P Near	 0000069A _TEXT	Length= 0000015E Public STDCALL
  pasa2  . . . . . . . . . . . .	L Near	 000006D1 _TEXT	
  pasa3  . . . . . . . . . . . .	L Near	 000006E6 _TEXT	
  pasa4  . . . . . . . . . . . .	L Near	 000006FB _TEXT	
  pasa5  . . . . . . . . . . . .	L Near	 00000710 _TEXT	
  pasa6  . . . . . . . . . . . .	L Near	 00000725 _TEXT	
  pasa7  . . . . . . . . . . . .	L Near	 0000073A _TEXT	
  pasa8  . . . . . . . . . . . .	L Near	 0000074F _TEXT	
  pasa9  . . . . . . . . . . . .	L Near	 00000764 _TEXT	
  pasa10 . . . . . . . . . . . .	L Near	 00000779 _TEXT	
  pasa11 . . . . . . . . . . . .	L Near	 0000078E _TEXT	
  pasa12 . . . . . . . . . . . .	L Near	 000007A3 _TEXT	
  pasa13 . . . . . . . . . . . .	L Near	 000007B8 _TEXT	
  pasa14 . . . . . . . . . . . .	L Near	 000007CD _TEXT	
  pasa15 . . . . . . . . . . . .	L Near	 000007E2 _TEXT	
  pasaFin  . . . . . . . . . . .	L Near	 000007F7 _TEXT	
mostrarMensaje . . . . . . . . .	P Near	 00000194 _TEXT	Length= 000000B3 Public STDCALL
  CICLO  . . . . . . . . . . . .	L Near	 000001BC _TEXT	
  MENOR  . . . . . . . . . . . .	L Near	 000001ED _TEXT	
  NoMENOR  . . . . . . . . . . .	L Near	 000001F3 _TEXT	
  MEN  . . . . . . . . . . . . .	L Near	 0000020A _TEXT	
  NoMEN  . . . . . . . . . . . .	L Near	 00000210 _TEXT	
  menor6 . . . . . . . . . . . .	L Near	 0000023A _TEXT	
  finsi  . . . . . . . . . . . .	L Near	 00000246 _TEXT	
ordenar  . . . . . . . . . . . .	P Near	 00000A7F _TEXT	Length= 000000E4 Public STDCALL
  CicloOrdenar . . . . . . . . .	L Near	 00000A89 _TEXT	
  CicloComparar  . . . . . . . .	L Near	 00000AB7 _TEXT	
  esMayor  . . . . . . . . . . .	L Near	 00000AF6 _TEXT	
pedirEstadisticos  . . . . . . .	P Near	 000005DE _TEXT	Length= 000000BC Public STDCALL
  seleccionEstad . . . . . . . .	L Near	 000005F9 _TEXT	
  cicloUsuario . . . . . . . . .	L Near	 00000627 _TEXT	
  comaUsu  . . . . . . . . . . .	L Near	 00000630 _TEXT	
  noComaUsu  . . . . . . . . . .	L Near	 00000645 _TEXT	
  continueUsu  . . . . . . . . .	L Near	 00000665 _TEXT	
  finSeleccion . . . . . . . . .	L Near	 00000699 _TEXT	
pintarBarrasIni  . . . . . . . .	P Near	 00000247 _TEXT	Length= 00000033 Public STDCALL
pintarBarra  . . . . . . . . . .	P Near	 0000027A _TEXT	Length= 00000045 Public STDCALL
  CiloImprimir . . . . . . . . .	L Near	 00000289 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000619C _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00006211 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000626E _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000062CB _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000062FD _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000631A _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000631F _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00006326 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00006365 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000063AB _DATA	
??000A . . . . . . . . . . . . .	Byte	 000063EE _DATA	
??000B . . . . . . . . . . . . .	Byte	 0000643E _DATA	
??000C . . . . . . . . . . . . .	Byte	 00006470 _DATA	
??000D . . . . . . . . . . . . .	Byte	 000064B8 _DATA	
??000E . . . . . . . . . . . . .	Byte	 000064EB _DATA	
??000F . . . . . . . . . . . . .	Byte	 00006550 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 0000657C _DATA	
??0011 . . . . . . . . . . . . .	Byte	 0000659A _DATA	
??0012 . . . . . . . . . . . . .	Byte	 000065B0 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 000065BD _DATA	
??0014 . . . . . . . . . . . . .	Byte	 000065C7 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 000065DD _DATA	
??0016 . . . . . . . . . . . . .	Byte	 000065F1 _DATA	
??0017 . . . . . . . . . . . . .	Byte	 00006602 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 00006611 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 0000661E _DATA	
??001A . . . . . . . . . . . . .	Byte	 0000663F _DATA	
??001B . . . . . . . . . . . . .	Byte	 0000666E _DATA	
??001C . . . . . . . . . . . . .	Byte	 0000667D _DATA	
??001D . . . . . . . . . . . . .	Byte	 00006695 _DATA	
??001E . . . . . . . . . . . . .	Byte	 000066AA _DATA	
??001F . . . . . . . . . . . . .	Byte	 000066D5 _DATA	
??0020 . . . . . . . . . . . . .	Byte	 00006702 _DATA	
??0021 . . . . . . . . . . . . .	Byte	 00006718 _DATA	
??0022 . . . . . . . . . . . . .	Byte	 00006725 _DATA	
??0023 . . . . . . . . . . . . .	Byte	 0000672F _DATA	
??0024 . . . . . . . . . . . . .	Byte	 00006745 _DATA	
??0025 . . . . . . . . . . . . .	Byte	 00006759 _DATA	
??0026 . . . . . . . . . . . . .	Byte	 0000676A _DATA	
??0027 . . . . . . . . . . . . .	Byte	 00006779 _DATA	
??0028 . . . . . . . . . . . . .	Byte	 00006786 _DATA	
??0029 . . . . . . . . . . . . .	Byte	 000067AE _DATA	
??002A . . . . . . . . . . . . .	Byte	 000067E2 _DATA	
??002B . . . . . . . . . . . . .	Byte	 000067F1 _DATA	
??002C . . . . . . . . . . . . .	Byte	 00006809 _DATA	
??002D . . . . . . . . . . . . .	Byte	 0000681E _DATA	
??002E . . . . . . . . . . . . .	Byte	 00006849 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CuadrosAscii . . . . . . . . . .	Byte	 00000000 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
auxCiclos  . . . . . . . . . . .	DWord	 00000334 _DATA	
auxSumatoria . . . . . . . . . .	QWord	 00004854 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boolEstadisticos . . . . . . . .	DWord	 00005FD0 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
buferArchivo . . . . . . . . . .	Byte	 000034AA _DATA	
buferUsuario . . . . . . . . . .	Byte	 00005F80 _DATA	
cantDatosDistintos . . . . . . .	DWord	 000034A2 _DATA	
ceroReal . . . . . . . . . . . .	QWord	 0000489C _DATA	
colores1 . . . . . . . . . . . .	Number	 000000F9h   
colores2 . . . . . . . . . . . .	Number	 0000009Bh   
colores3 . . . . . . . . . . . .	Number	 0000009Fh   
coma . . . . . . . . . . . . . .	DWord	 00004840 _DATA	
contCicloDecimales . . . . . . .	DWord	 00004844 _DATA	
contEjecuciones  . . . . . . . .	DWord	 00000330 _DATA	
contMensaje  . . . . . . . . . .	Byte	 0000032F _DATA	
contadorBarra  . . . . . . . . .	DWord	 00000008 _DATA	
contadorMensaje  . . . . . . . .	DWord	 0000032B _DATA	
cuartiles  . . . . . . . . . . .	QWord	 00005EBC _DATA	
cuasiVarianza  . . . . . . . . .	QWord	 00005F5C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
datoActual . . . . . . . . . . .	Byte	 00004833 _DATA	
deciles  . . . . . . . . . . . .	QWord	 00005EE4 _DATA	
desvEstandar . . . . . . . . . .	QWord	 00005F54 _DATA	
desvMediana  . . . . . . . . . .	QWord	 00005F6C _DATA	
desvMedia  . . . . . . . . . . .	QWord	 00005F64 _DATA	
diez . . . . . . . . . . . . . .	QWord	 0000485C _DATA	
epsilon  . . . . . . . . . . . .	QWord	 00004890 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000005AA _DATA	
finArchivo . . . . . . . . . . .	DWord	 00004850 _DATA	
frecuenciaMax  . . . . . . . . .	DWord	 000034A6 _DATA	
frecuencias  . . . . . . . . . .	DWord	 00002B3E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
indiceCicloComparar  . . . . . .	DWord	 00004884 _DATA	
indiceCicloOrdenar . . . . . . .	DWord	 00004880 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxDatos . . . . . . . . . . . .	Number	 00000258h   
mediaarmonica  . . . . . . . . .	QWord	 00005B8C _DATA	
mediageometrica  . . . . . . . .	QWord	 00005B84 _DATA	
mediana  . . . . . . . . . . . .	QWord	 000048B4 _DATA	
media  . . . . . . . . . . . . .	QWord	 000048AC _DATA	
menorValor . . . . . . . . . . .	QWord	 00004888 _DATA	
menosUno . . . . . . . . . . . .	QWord	 00004874 _DATA	
mensajeBienvenida10  . . . . . .	Byte	 00000180 _DATA	
mensajeBienvenida11  . . . . . .	Byte	 000001BD _DATA	
mensajeBienvenida12  . . . . . .	Byte	 000001F9 _DATA	
mensajeBienvenida13  . . . . . .	Byte	 0000022F _DATA	
mensajeBienvenida14  . . . . . .	Byte	 00000276 _DATA	
mensajeBienvenida1 . . . . . . .	Byte	 00000044 _DATA	
mensajeBienvenida2 . . . . . . .	Byte	 00000046 _DATA	
mensajeBienvenida3 . . . . . . .	Byte	 00000085 _DATA	
mensajeBienvenida4 . . . . . . .	Byte	 00000087 _DATA	
mensajeBienvenida5 . . . . . . .	Byte	 000000C1 _DATA	
mensajeBienvenida6 . . . . . . .	Byte	 000000C3 _DATA	
mensajeBienvenida7 . . . . . . .	Byte	 000000FD _DATA	
mensajeBienvenida8 . . . . . . .	Byte	 0000013C _DATA	
mensajeBienvenida9 . . . . . . .	Byte	 0000017E _DATA	
mensajeDespedida1  . . . . . . .	Byte	 000002B0 _DATA	
mensajeDespedida2  . . . . . . .	Byte	 000002B2 _DATA	
mensajeDespedida3  . . . . . . .	Byte	 000002EC _DATA	
mensajeDespedida4  . . . . . . .	Byte	 000002EE _DATA	
mensajeDespedida5  . . . . . . .	Byte	 00000329 _DATA	
mensajeD . . . . . . . . . . . .	DWord	 00000278 _DATA	
mensaje  . . . . . . . . . . . .	DWord	 0000000C _DATA	
moda . . . . . . . . . . . . . .	QWord	 000048BC _DATA	
momentosCentrales  . . . . . . .	QWord	 00005F44 _DATA	
momentosOrigen . . . . . . . . .	QWord	 00005F3C _DATA	
numDos . . . . . . . . . . . . .	QWord	 00004864 _DATA	
numLineasMsjBv . . . . . . . . .	Number	 0000000Dh   
numLineasMsjDp . . . . . . . . .	Number	 00000004h   
numeroReal . . . . . . . . . . .	QWord	 000048A4 _DATA	
numerosDistintos . . . . . . . .	QWord	 00001876 _DATA	
numeros  . . . . . . . . . . . .	QWord	 000005AE _DATA	
ordenMomCent . . . . . . . . . .	DWord	 00005F78 _DATA	
ordenMomOrig . . . . . . . . . .	DWord	 00005F74 _DATA	
percentiles  . . . . . . . . . .	QWord	 00005B94 _DATA	
posActual  . . . . . . . . . . .	DWord	 0000487C _DATA	
posMenor . . . . . . . . . . . .	DWord	 00004898 _DATA	
posModa  . . . . . . . . . . . .	DWord	 00005F7C _DATA	
realActual . . . . . . . . . . .	QWord	 00004838 _DATA	
realesLeidos . . . . . . . . . .	DWord	 00004848 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
relleno2 . . . . . . . . . . . .	DWord	 0000600C _DATA	
relleno  . . . . . . . . . . . .	DWord	 00004834 _DATA	
saltoDeLinea . . . . . . . . . .	DWord	 0000484C _DATA	
stringEstadisticos . . . . . . .	Byte	 0000034C _DATA	
tamanoBufer  . . . . . . . . . .	Number	 00001388h   
tiempoEspera . . . . . . . . . .	Word	 00000348 _DATA	
unDecimo . . . . . . . . . . . .	QWord	 0000486C _DATA	
urlDatos . . . . . . . . . . . .	Byte	 000004A6 _DATA	
varianza . . . . . . . . . . . .	QWord	 00005F4C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
